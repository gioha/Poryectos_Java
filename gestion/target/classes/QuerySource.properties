#---------------------------------------------------------------------------------
# 							            QUERYS
#
# Contiene los querys que se utilizaran en cada modulo o de manera general
# 
# Nomenclatura query: query_"modulo al que pertenece"_"nombre del query"
#
# Ejemplo: query_administracionUsuarios_todo = Select * FROM usuarios.
#---------------------------------------------------------------------------------

#---------------------------------------------------------------------------------
#						QUERY Administrador
#---------------------------------------------------------------------------------
query_administrador_obtenAreasOficialia												= SELECT ca.id_area as idArea, ca.tipo_area as tipoArea, ca.descripcion FROM C_AREAS ca INNER JOIN OFICIALIAS_AREAS oa ON ca.id_area = oa.id_area AND ca.tipo_area = oa.tipo_area AND oa.id_oficialia = :idOficilia
query_menu_obtenerMenus																= SELECT MESU.ID_MENU AS idMenu, MESU.DESCRIPCION_MENU AS nombreMenu, MESU.ID_SUBMENU AS idSubmenu, MESU.DESCIPCION_SUBMENU AS nombreSubmenu, M.ID_MODULO AS idModulo, M.TIPO_MODULO AS tipoModulo, M.NOMBRE_MODULO AS nombreModulo, M.ID_ACCION AS idAccion, M.URL_MODULO AS urlMenu FROM ( SELECT M.ID_SISTEMA, M.ID_MENU, M.DESCRIPCION AS DESCRIPCION_MENU, S.ID_SUBMENU, S.DESCRIPCION AS DESCIPCION_SUBMENU  FROM MENUS M RIGHT OUTER JOIN SUBMENUS S ON M.ID_MENU = S.ID_MENU AND M.ID_SISTEMA = S.ID_SISTEMA ) MESU  INNER JOIN (  SELECT MAR.ID_SISTEMA, M.ID_MENU, ID_SUBMENU, MAR.ID_MODULO, M.TIPO_MODULO, M.NOMBRE_MODULO, MAR.ID_GRUPO, MAR.ID_ACCION, MAR.URL_MODULO FROM MODULOS M RIGHT OUTER JOIN ( SELECT MA.ID_SISTEMA, MA.ID_MODULO, MA.ID_GRUPO, MA.ID_ACCION, UM.URL_MODULO FROM URLS_MODULOS UM RIGHT OUTER JOIN ( SELECT ID_SISTEMA,ID_MODULO,ID_GRUPO, MIN(ID_ACCION) AS ID_ACCION FROM ACCIONES_PERMISOS WHERE ID_MODULO IN ( SELECT ID_MODULO FROM ESTATUS_MODULOS  WHERE ESTATUS LIKE 'A' ) AND ID_GRUPO IN (  SELECT ID_GRUPO FROM GRUPOS_SISTEMAS WHERE GRUPOS LIKE :ROLUSER  ) GROUP BY ID_SISTEMA,ID_MODULO,ID_GRUPO ) MA ON UM.ID_SISTEMA =  MA.ID_SISTEMA AND UM.ID_MODULO = MA.ID_MODULO AND UM.ID_ACCION = MA.ID_ACCION  ) MAR ON M.ID_MODULO = MAR.ID_MODULO AND M.ID_SISTEMA = MAR.ID_SISTEMA  ) M ON MESU.ID_SISTEMA = M.ID_SISTEMA AND MESU.ID_MENU = M.ID_MENU AND MESU.ID_SUBMENU = M.ID_SUBMENU  ORDER BY MESU.ID_MENU, MESU.ID_SUBMENU, M.ID_MODULO, M.ID_ACCION
query_administrador_notificacionesOficialia											= SELECT COALESCE(SUM(documentos_pendientes),0) AS documentosPendientes FROM NOTIFICACIONES_OF WHERE tipo_area || id_area IN (:idAreaTipoArea) AND id_modulo = :idModulo

#---------------------------------------------------------------------------------
#						QUERY Captura de documentos
#---------------------------------------------------------------------------------
query_capturaDocumentos_consultaEstadosDisponibles									= SELECT edo.id_estado AS idEstado, edo.nombre_estado AS nombreEstado FROM C_AREAS ca INNER JOIN JERARQUIA_PERSONAS jp ON (ca.id_area = jp.id_area) INNER JOIN GEOGRAFICOINE.ESTADOS edo ON (edo.id_estado = ca.id_entidad AND edo.id_estado <> 0) GROUP BY edo.id_estado, edo.nombre_estado ORDER BY edo.nombre_estado

#---------------------------------------------------------------------------------
#						QUERY Instruccionesq
#---------------------------------------------------------------------------------
query_instrucciones_consultarInstruccionesAtencion									= SELECT id_persona as idPersona,  id_instruccion as idInstruccion, tipo_instruccion as tipoInstruccion, descripcion as descripcion, dias_respuesta as diasRespuesta, con_notificacion as conNotificacion, estatus as estatus, usuario as usuario,  fecha_hora as fechaRegistro from instrucciones
query_instrucciones_eliminarInstruccionesLogicas									= UPDATE INSTRUCCIONES SET estatus = 'E' WHERE id_persona = :idPersona AND estatus = 'A'
query_instrucciones_insertar														= INSERT INTO INSTRUCCIONES (id_persona, id_instruccion, tipo_instruccion, descripcion, dias_respuesta, con_notificacion, estatus, ordenamiento, usuario, fecha_hora) values (:idPersona, (Select COALESCE(Max(id_instruccion), 0)+1 from INSTRUCCIONES where id_persona = :idPersona), :tipoInstruccion, :descripcion, :diasRespuesta, :conNotificacion, :estatus , :ordenamiento, :usuario, :fechaHora)
query_consultar_instrucciones_turnadas												= SELECT INS.ID_PERSONA AS idPersona, INS.ID_INSTRUCCION as idInstruccion, INS.TIPO_INSTRUCCION AS tipoInstruccion,INS.DESCRIPCION AS descripcion, INS.DIAS_RESPUESTA AS diasRespuesta, INS.CON_NOTIFICACION AS conNotificacion,INS.ESTATUS AS estatus, INS.ORDENAMIENTO AS ordenamiento, INS.USUARIO AS usuario, INS.FECHA_HORA AS fechaHora FROM TURN_INSTRUCCION TURN INNER JOIN INSTRUCCIONES INS ON INS.ID_INSTRUCCION=TURN.ID_INSTRUCCION AND INS.ID_PERSONA=TURN.ID_PERSONA WHERE TURN.ID_HISTORICO_RECEP=:idHistoricoRecep

#---------------------------------------------------------------------------------
#						QUERY Oficialía
#---------------------------------------------------------------------------------
query_oficialia_actualizar_estatus													= MERGE INTO oficialias oficialia USING(select o.id_oficialia AS id FROM oficialias o LEFT JOIN oficialias_areas oa ON o.id_oficialia = oa.id_oficialia WHERE o.id_oficialia = :idOficialia AND oa.id_oficialia IS NULL AND o.estatus <> 'NO') sub ON (oficialia.id_oficialia = sub.id) WHEN MATCHED THEN UPDATE SET oficialia.estatus = 'NO'

#---------------------------------------------------------------------------------
#						QUERY Estructura
#---------------------------------------------------------------------------------
query_estructura_consultar_areas_sin_estructura										= select ca.id_area AS idArea, ca.descripcion AS descripcion, ca.siglas AS siglas, ca.tipo_area AS tipoArea, ca.id_entidad AS idEntidad from c_areas ca full outer join jerarquia_personas jp on (ca.id_area = jp.id_area) where ca.id_area is null or jp.id_area is null and ca.tipo_area = :tipoArea and ca.id_entidad = :idEntidad group by ca.id_area, ca.descripcion, ca.siglas, ca.tipo_area, ca.id_entidad ORDER BY ca.descripcion
query_estructura_consultar_areas_con_estructura										= select ca.id_area AS idArea, ca.descripcion AS descripcion, ca.siglas AS siglas, ca.tipo_area AS tipoArea, ca.id_entidad AS idEntidad from c_areas ca inner join jerarquia_personas jp on (ca.id_area = jp.id_area) where ca.tipo_area = :tipoArea and ca.id_entidad = :idEntidad group by ca.id_area, ca.descripcion, ca.siglas, ca.tipo_area, ca.id_entidad ORDER BY ca.id_area
query_estructura_consultar_areas_sin_estructura_tipo								= select ca.id_area AS idArea, ca.descripcion AS descripcion, ca.siglas AS siglas, ca.tipo_area AS tipoArea, ca.id_entidad AS idEntidad from c_areas ca full outer join jerarquia_personas jp on (ca.id_area = jp.id_area) where ca.id_area is null or jp.id_area is null and ca.tipo_area = :tipoArea group by ca.id_area, ca.descripcion, ca.siglas, ca.tipo_area, ca.id_entidad ORDER BY ca.descripcion
query_estructura_consultar_areas_con_estructura_tipo								= select ca.id_area AS idArea, ca.descripcion AS descripcion, ca.siglas AS siglas, ca.tipo_area AS tipoArea, ca.id_entidad AS idEntidad from c_areas ca inner join jerarquia_personas jp on (ca.id_area = jp.id_area) where ca.tipo_area = :tipoArea group by ca.id_area, ca.descripcion, ca.siglas, ca.tipo_area, ca.id_entidad ORDER BY ca.descripcion
query_estructura_obtener_estados_con_estructura										= select ca.id_entidad AS idEntidad from c_areas ca inner join jerarquia_personas jp on (ca.id_area = jp.id_area) where ca.tipo_area = 2 group by ca.id_entidad ORDER BY ca.id_entidad
query_estructura_obtener_estados_sin_estructura										= select ca.id_entidad AS idEntidad from c_areas ca full outer join jerarquia_personas jp on (ca.id_area = jp.id_area) where ca.id_area is null or jp.id_area is null and ca.tipo_area = 2 group by ca.id_entidad order by ca.id_entidad
query_estructura_actualizar_estatus													= MERGE INTO estructura_areas estructura USING (select ea.id_persona AS id FROM estructura_areas ea LEFT JOIN jerarquia_personas jp ON ea.ID_PERSONA = jp.ID_PERSONA WHERE ea.id_persona = :idPersona AND jp.ID_PERSONA IS NULL AND ea.estatus <> 'NO') sub ON (estructura.id_persona = sub.id) WHEN MATCHED THEN UPDATE SET estructura.estatus = 'NO'
query_estructura_actualizar_nombre_nivel											= UPDATE estructura_areas SET nombre_nivel_area = null WHERE id_persona = :idPersona
query_estructura_actualizar_corresponsales											= MERGE INTO corresponsales corres USING (select c.id_corresponsal AS id FROM corresponsales c LEFT JOIN jerarquia_personas jp ON c.ID_PERSONA_CO = jp.ID_PERSONA WHERE c.id_persona_co = :idPersona AND jp.ID_PERSONA IS NULL AND c.estatus <> 'I') sub ON (corres.id_corresponsal = sub.id) WHEN MATCHED THEN UPDATE SET corres.estatus = 'I'
query_estructura_reiniciar_corresponsal												= UPDATE estructura_areas SET ver_version_t = null WHERE id_area = :idArea and tipo_area = :tipoArea
query_estructura_actualizar_corresponsal											= UPDATE  estructura_areas ea SET ea.ver_version_t = 1 WHERE ea.id_persona in (SELECT id_persona FROM jerarquia_personas WHERE id_area = :idArea AND tipo_area = :tipoArea AND id_nivel = 1) OR ea.id_persona in(SELECT id_persona_co FROM corresponsales WHERE estatus = 'A' AND id_persona_ti in (SELECT id_persona FROM jerarquia_personas WHERE id_area = :idArea AND tipo_area = :tipoArea AND id_nivel = 1))

#---------------------------------------------------------------------------------
#						QUERY EstructuraAreas
#---------------------------------------------------------------------------------
query_estructura_consultar_area														= SELECT ID_PERSONA AS idPersona, ID_AREA AS idArea, TIPO_AREA AS tipoArea, nombre, apellidos, nombre || ' '||apellidos as nombreCompleto , puesto, CUENTA_LDAP AS cuentaLDAP, NOMBRE_NIVEL_AREA AS nombreNivelArea , genero, tratamiento, EXTENSION_TEL AS extensionTel, VER_VERSION_T AS verVersionT FROM ESTRUCTURA_AREAS <condiciones> 
query_estructura_consultar_personas_misma_area_coincidencia							= SELECT ID_PERSONA AS idPersona, ID_AREA AS idArea, TIPO_AREA AS tipoArea, nombre, apellidos, nombre || ' '||apellidos as nombreCompleto , puesto, CUENTA_LDAP AS cuentaLDAP, NOMBRE_NIVEL_AREA AS nombreNivelArea , genero, tratamiento, EXTENSION_TEL AS extensionTel, VER_VERSION_T AS verVersionT FROM ESTRUCTURA_AREAS WHERE ESTATUS='SI' AND ID_AREA=:idArea AND TIPO_AREA=:tipoArea AND CUENTA_LDAP!=:cuentaLDAP AND (NOMBRE LIKE :coincidencia or APELLIDOS LIKE :coincidencia)
query_estructura_consultar_personas_misma_area										= SELECT ID_PERSONA AS idPersona, ID_AREA AS idArea, TIPO_AREA AS tipoArea, nombre, apellidos, nombre || ' '||apellidos as nombreCompleto , puesto, CUENTA_LDAP AS cuentaLDAP, NOMBRE_NIVEL_AREA AS nombreNivelArea , genero, tratamiento, EXTENSION_TEL AS extensionTel, VER_VERSION_T AS verVersionT FROM ESTRUCTURA_AREAS WHERE ESTATUS='SI' AND ID_AREA=:idArea AND TIPO_AREA=:tipoArea AND CUENTA_LDAP!=:cuentaLDAP
query_estructura_consultar_estructura_por_area										= select  jp.id_persona as idPersona,  jp.id_area as idArea, jp.tipo_area as tipoArea, jp.id_nivel as idNivel,jp.id_persona_padre as idPersonaPadre, jp.nivel_padre as nivelPadre, jp.usuario as usuario, jp.fecha_hora as fechaHora, persona.cuenta_ldap as cuentaPersona, padre.cuenta_ldap as cuentaPadre from jerarquia_personas jp inner join estructura_areas persona on jp.id_persona = persona.id_persona inner join estructura_areas padre on jp.id_persona_padre = padre.id_persona where jp.tipo_area = :tipoArea and  jp.id_area = :idArea order by jp.id_nivel

#---------------------------------------------------------------------------------
#						QUERY Estados
#---------------------------------------------------------------------------------
query_estados_consultar_estados_sin_organigrama										= SELECT e.id_estado AS idEstado, e.id_corte AS idCorte, e.nombre_estado AS nombreEstado, e.abreviatura AS abreviatura, e.id_circunscripcion AS idCircunscripcion, e.circunscripcion AS circunscripcion FROM c_areas ca INNER JOIN geograficoine.estados e on e.id_estado = ca.id_entidad FULL OUTER JOIN jerarquia_personas jp on (ca.id_area = jp.id_area) WHERE ca.id_area IS NULL OR jp.id_area IS NULL AND ca.tipo_area = 2 GROUP BY e.id_estado, e.id_corte, e.nombre_estado, e.abreviatura, e.id_circunscripcion, e.circunscripcion ORDER BY e.id_estado
query_estados_consultar_estados_con_organigrama										= SELECT e.id_estado AS idEstado, e.id_corte AS idCorte, e.nombre_estado AS nombreEstado, e.abreviatura AS abreviatura, e.id_circunscripcion AS idCircunscripcion, e.circunscripcion AS circunscripcion FROM c_areas ca INNER JOIN geograficoine.estados e on e.id_estado = ca.id_entidad INNER JOIN jerarquia_personas jp ON (ca.id_area = jp.id_area) WHERE ca.tipo_area = 2 GROUP BY e.id_estado, e.id_corte, e.nombre_estado, e.abreviatura, e.id_circunscripcion, e.circunscripcion ORDER BY e.id_estado

#---------------------------------------------------------------------------------
#						QUERY Acronimos
#---------------------------------------------------------------------------------
query_acronimos_consultarAcronimosLazy												= SELECT * FROM ( SELECT row_.*, ROWNUM rownum_ FROM ( SELECT ca.descripcion AS descripcionArea, acr.id_area AS idArea, acr.tipo_area AS tipoArea, acr.id_tipo_documento AS idTipoDocumento, acr.id_acronimo AS idAcronimo, acr.descripcion, acr.acronimo_agrupacion AS acronimoAgrupacion, count(id_numero_documento) AS documentosUtilizados, ctd.descripcion AS descripcionTipoDoc FROM ACRONIMOS acr INNER JOIN C_AREAS ca ON acr.tipo_area = ca.tipo_area AND acr.id_area = ca.id_area INNER JOIN C_TIPO_DOCUMENTOS ctd ON acr. id_tipo_documento = ctd.id_tipo_documento LEFT OUTER JOIN APARTADO_NUM_DOC andoc ON acr.tipo_area = andoc.tipo_area AND acr.id_area = andoc.id_area AND acr.id_acronimo = andoc.id_acronimo AND acr.id_tipo_documento = andoc.id_tipo_documento <!validaciones> GROUP BY ca.descripcion, acr.id_area, acr.tipo_area, acr.id_tipo_documento, acr.id_acronimo, acr.descripcion, acr.acronimo_agrupacion, acr.fecha_hora, ctd.descripcion ORDER BY acr.fecha_hora desc ) row_  WHERE rownum <= :maxRows ) WHERE rownum_ > :minRows
query_acronimos_consultarAcronimosLazyTotal											= SELECT COUNT (*) FROM ( SELECT ca.descripcion AS descripcionArea, acr.id_area AS idArea, acr.tipo_area AS tipoArea, acr.id_tipo_documento AS idTipoDocumento, acr.id_acronimo AS idAcronimo, acr.descripcion, acr.acronimo_agrupacion AS acronimoAgrupacion, count(id_numero_documento) AS documentosUtilizados, ctd.descripcion AS descripcionTipoDoc FROM ACRONIMOS acr INNER JOIN C_AREAS ca ON acr.tipo_area = ca.tipo_area AND acr.id_area = ca.id_area INNER JOIN C_TIPO_DOCUMENTOS ctd ON acr. id_tipo_documento = ctd.id_tipo_documento LEFT OUTER JOIN APARTADO_NUM_DOC andoc ON acr.tipo_area = andoc.tipo_area AND acr.id_area = andoc.id_area AND acr.id_acronimo = andoc.id_acronimo AND acr.id_tipo_documento = andoc.id_tipo_documento <!validaciones> GROUP BY ca.descripcion, acr.id_area, acr.tipo_area, acr.id_tipo_documento, acr.id_acronimo, acr.descripcion, acr.acronimo_agrupacion, acr.fecha_hora, ctd.descripcion ORDER BY acr.fecha_hora desc )
query_consultar_tipo_area_con_documentos											= SELECT acr.tipo_area AS idTipoArea, cta.descripcion FROM ACRONIMOS acr INNER JOIN C_AREAS ca ON acr.tipo_area = ca.tipo_area AND acr.id_area = ca.id_area INNER JOIN C_TIPO_DOCUMENTOS ctd ON acr. id_tipo_documento = ctd.id_tipo_documento INNER JOIN C_TIPO_AREAS cta ON acr.tipo_area = cta.id_tipo_area LEFT OUTER JOIN APARTADO_NUM_DOC andoc ON acr.tipo_area = andoc.tipo_area AND acr.id_area = andoc.id_area AND acr.id_acronimo = andoc.id_acronimo AND acr.id_tipo_documento = andoc.id_tipo_documento GROUP BY acr.tipo_area, cta.descripcion ORDER BY cta.descripcion
query_consultar_tipo_documento_con_documentos 										= SELECT acr.id_tipo_documento AS idTipoDocumento, ctd.descripcion FROM ACRONIMOS acr INNER JOIN C_AREAS ca ON acr.tipo_area = ca.tipo_area AND acr.id_area = ca.id_area INNER JOIN C_TIPO_DOCUMENTOS ctd ON acr. id_tipo_documento = ctd.id_tipo_documento LEFT OUTER JOIN APARTADO_NUM_DOC andoc ON acr.tipo_area = andoc.tipo_area  AND acr.id_area = andoc.id_area AND acr.id_acronimo = andoc.id_acronimo AND acr.id_tipo_documento = andoc.id_tipo_documento GROUP BY acr.id_tipo_documento, ctd.descripcion ORDER BY ctd.descripcion
query_consultar_areas_acronimos														= select distinct C_AREAS.ID_AREA as idArea, C_AREAS.TIPO_AREA as tipoArea, C_AREAS.ID_ENTIDAD as idEntidad, C_AREAS.DESCRIPCION as descripcion, C_AREAS.SIGLAS as siglas from C_AREAS right join ACRONIMOS on ACRONIMOS.ID_AREA = C_AREAS.ID_AREA
query_consultar_acronimos_por_area													= select DISTINCT  C_AREAS.DESCRIPCION as descripcionArea, ACRONIMOS.ID_AREA as idArea, ACRONIMOS.TIPO_AREA as tipoArea, ACRONIMOS.ID_TIPO_DOCUMENTO as idTipoDocumento, ACRONIMOS.ID_ACRONIMO as idAcronimo, ACRONIMOS.DESCRIPCION as descripcion, ACRONIMOS.ACRONIMO_AGRUPACION as acronimoAgrupacion, count(APARTADO_NUM_DOC.ID_NUMERO_DOCUMENTO) over (PARTITION  BY APARTADO_NUM_DOC.ID_TIPO_DOCUMENTO) as documentosUtilizados, C_TIPO_DOCUMENTOS.DESCRIPCION as descripcionTipoDoc from ACRONIMOS left join C_AREAS on ACRONIMOS.ID_AREA = C_AREAS.ID_AREA AND C_AREAS.TIPO_AREA=ACRONIMOS.TIPO_AREA left join C_TIPO_DOCUMENTOS on ACRONIMOS.ID_TIPO_DOCUMENTO = C_TIPO_DOCUMENTOS.ID_TIPO_DOCUMENTO left join APARTADO_NUM_DOC on ACRONIMOS.ID_AREA = APARTADO_NUM_DOC.ID_AREA and ACRONIMOS.TIPO_AREA = APARTADO_NUM_DOC.TIPO_AREA and ACRONIMOS.ID_TIPO_DOCUMENTO = APARTADO_NUM_DOC.ID_TIPO_DOCUMENTO and ACRONIMOS.ID_ACRONIMO = APARTADO_NUM_DOC.ID_ACRONIMO where ACRONIMOS.ID_AREA = :idArea

#---------------------------------------------------------------------------------
#						QUERY HistDocCreacion
#---------------------------------------------------------------------------------
query_hist_doc_creacion_insertar													= INSERT INTO HIST_DOC_CREACION (ID_DOCUMENTO , ANIO , ID_HISTORICO , ID_PERSONA_HIST , ID_ESTATUS, USUARIO,FECHA_HORA) values (:idDocumento, :anio, (Select COALESCE(Max(ID_HISTORICO), 0)+1 from HIST_DOC_CREACION where ID_DOCUMENTO=:idDocumento), :idPersonaHist, :idEstatus, :usuario , :fechaHora)

#---------------------------------------------------------------------------------
#						QUERY HistDocRecep
#---------------------------------------------------------------------------------
query_hist_doc_recep_consultar_personas_turnaron									= SELECT REC.ID_DOCUMENTO AS idDocumento, REC.ID_HISTORICO_RECEP AS idHistoricoRecep, REC.ID_HISTORICO_PADRE AS idHistoricoPadre, REC.ID_PERSONA_HIST AS idPersonaHist, REC.ID_ESTATUS_RECEP AS idEstatusRecep,REC.FECHA_HORA AS fechaHora, ESTR.NOMBRE AS nombre, ESTR.APELLIDOS AS apellidos, ESTR.CUENTA_LDAP AS cuentaLDAP FROM HIST_DOC_RECEP REC INNER JOIN ESTRUCTURA_AREAS ESTR ON REC.ID_PERSONA_HIST=ESTR.ID_PERSONA WHERE ID_DOCUMENTO=:idDocumento AND ID_HISTORICO_PADRE IS NULL ORDER BY REC.ID_HISTORICO_RECEP
query_hist_doc_recep_consultar_personas_turnados									= SELECT REC.ID_DOCUMENTO AS idDocumento, REC.ID_HISTORICO_RECEP AS idHistoricoRecep, REC.ID_HISTORICO_PADRE AS idHistoricoPadre, REC.ID_PERSONA_HIST AS idPersonaHist, REC.ID_ESTATUS_RECEP AS idEstatusRecep, REC.FECHA_HORA AS fechaHora, ESTR.NOMBRE AS nombre, ESTR.APELLIDOS AS apellidos, ESTR.CUENTA_LDAP AS cuentaLDAP, TURNO.ID_ESTATUS_TURNO AS idEstatusTurno, CTURNO.DESCRIPCION AS descripcion FROM HIST_DOC_RECEP REC INNER JOIN ESTRUCTURA_AREAS ESTR ON REC.ID_PERSONA_HIST=ESTR.ID_PERSONA INNER JOIN HIST_DOC_TURNO TURNO ON TURNO.ID_HISTORICO_RECEP=REC.ID_HISTORICO_RECEP INNER JOIN C_ESTATUS_HIST_DOC_TURNO CTURNO ON TURNO.ID_ESTATUS_TURNO=CTURNO.ID_ESTATUS_TURNO WHERE REC.ID_DOCUMENTO=:idDocumento AND REC.ID_HISTORICO_PADRE IS NOT NULL ORDER BY REC.ID_HISTORICO_RECEP
query_hist_doc_recep_consultar_personas_unica_turnaron								= SELECT DISTINCT REC.ID_PERSONA_HIST AS idPersonaHist FROM HIST_DOC_RECEP REC WHERE REC.ID_DOCUMENTO=:idDocumento AND REC.ID_HISTORICO_PADRE IS NULL

#---------------------------------------------------------------------------------
#						QUERY HistDocTurno
#---------------------------------------------------------------------------------
query_hist_doc_turno_consultar_personas_turnadas									= SELECT TURNO.ID_AREA AS idArea, TURNO.TIPO_AREA AS tipoArea, TURNO.ID_DOCUMENTO AS idDocumento, TURNO.ANIO AS anio, TURNO.ID_HISTORICO_RECEP AS idHistoricoRecep, TURNO.ID_PERSONA_HIST AS idPersonaHist, TURNO.ID_ESTATUS_TURNO AS idEstatusTurno, TURNO.USUARIO AS usuario, TURNO.FECHA_HORA AS fechaHora, TURNO.COMENTARIO_GRL AS comentarioGrl FROM HIST_DOC_RECEP RECEP INNER JOIN HIST_DOC_TURNO TURNO ON RECEP.ID_HISTORICO_RECEP=TURNO.ID_HISTORICO_RECEP WHERE RECEP.ID_DOCUMENTO=:idDocumento AND RECEP.ID_HISTORICO_PADRE=:idPersona  

#---------------------------------------------------------------------------------
#						QUERY TurnInstruccion
#---------------------------------------------------------------------------------
query_turninstruccion_consultar_instrucciones_turnadas								= SELECT TINST.ID_DOCUMENTO AS idDocumento, TINST.ID_HISTORICO_RECEP AS idHistoricoRecep, INST.ID_PERSONA AS idPersonaTurno, TINST.ID_INSTRUCCION AS idInstruccion, RECEP.ID_AREA AS idArea, RECEP.TIPO_AREA AS tipoArea, RECEP.ID_PERSONA_HIST AS idPersonaTurnada, INST.TIPO_INSTRUCCION AS tipoInstruccion, INST.ORDENAMIENTO as ordenamiento FROM TURN_INSTRUCCION TINST INNER JOIN HIST_DOC_RECEP RECEP ON TINST.ID_HISTORICO_RECEP=RECEP.ID_HISTORICO_RECEP INNER JOIN INSTRUCCIONES INST ON TINST.ID_INSTRUCCION=INST.ID_INSTRUCCION AND TINST.ID_PERSONA=INST.ID_PERSONA WHERE TINST.ID_DOCUMENTO=:idDocumento AND INST.ID_PERSONA=:idPersonaTurno AND INST.ESTATUS=:estatus ORDER BY INST.TIPO_INSTRUCCION, INST.ORDENAMIENTO

#---------------------------------------------------------------------------------
#						QUERY FirmaDocumentos
#---------------------------------------------------------------------------------
query_firma_documentos_insertar														= INSERT INTO FIRMA_DOCUMENTOS (ID_PERSONA , ID_DOCUMENTO , ANIO , HASH_DOCUMENTO_RECIBIDO , ID_PERSONA_REMITENTE , USUARIO , FECHA_HORA, PENDIENTE_ENVIO, PERSONA_REGRESO_ID, ESTATUS_REGRESADO, CON_MODIFICACIONES, ID_COMENTARIO, CON_VISUALIZACION) VALUES (:idPersona, :idDocumento, :anio, :hashDocumentoRecibido, :idPersonaRemitente, :usuario, :fechaHora, :pendienteEnvio, NULL, :estatusRegresado, :conModificacion, :idComentario, :conVisualizacion)
query_firma_guardarComentario														= INSERT INTO COMENTARIOS_DOCUMENTO (id_documento, id_comentario, anio, comentarios, estatus, usuario_comento, tipo_comentario, usuario, fecha_hora) values (:idDocumento, :idComentario, :anio, :comentarios, :estatus, :usuarioComento, :tipoComentario, :usuario, :fechaHora)
query_firma_activarComentario														= UPDATE BORRADOR_DOCUMENTOS SET con_comentarios = 1 WHERE id_documento = :idDocumento
query_firma_actualizarPendienteEnvio												= UPDATE FIRMA_DOCUMENTOS SET PENDIENTE_ENVIO = :pendienteEnvio WHERE id_persona = :idPersona AND id_documento = :idDocumento
query_firma_activarFirma															= UPDATE borrador_documentos SET con_firma = 1 WHERE id_documento = :idDocumento
query_firma_activarFirmaDocumento													= UPDATE documentos SET firmado = 1 WHERE id_documento = :idDocumento
query_firma_restarFirma																= UPDATE borrador_documentos SET num_enviado_firma = num_enviado_firma - 1 WHERE id_documento = :idDocumento
query_firma_eliminarBorrador														= DELETE from borrador_documentos where id_documento = :idDocumento
query_firma_insertarEdiciones														= INSERT INTO EDICIONES_DOCUMENTO (id_documento, anio, id_edicion, estatus, usuario_edicion, fecha_hora_edicion, usuario, fecha_hora) values (:idDocumento, :anio, (Select COALESCE(Max(id_edicion), 0)+1 from EDICIONES_DOCUMENTO where id_documento = :idDocumento), :estatus, :usuarioEdicion, :fechaHoraEdicion, :usuario, :fechaHora)
query_firma_activarModificacionFirma												= UPDATE FIRMA_DOCUMENTOS SET con_modificaciones = 1 WHERE id_documento = :idDocumento AND id_persona = :idPersona
query_firma_eliminarValidacionDocumento												= UPDATE DOCUMENTOS SET validado = 0, editado = 1 WHERE id_documento = :idDocumento
query_firma_activarVisualizacion													= UPDATE FIRMA_DOCUMENTOS SET con_visualizacion = 1 WHERE id_documento = :idDocumento AND id_persona = :idPersona
query_firma_regresarARemitente														= UPDATE firma_documentos SET estatus_regresado = 1, persona_regreso_id = :idPersona  WHERE id_documento = :idDocumento
query_firma_comentario																= UPDATE firma_documentos SET id_comentario = :idComentario WHERE id_persona_remitente = :idPersonaRemitente AND id_documento = :idDocumento AND id_persona = :idPersona
query_firma_comentario_quitar														= UPDATE firma_documentos SET id_comentario = 0 WHERE id_persona_remitente = :idPersonaRemitente AND id_documento = :idDocumento AND id_persona = :idPersona
query_firma_obtener_id_comentario													= SELECT id_documento, MAX(id_comentario) FROM comentarios_documento WHERE id_documento = idDocumento AND usuario_comento = :usuarioComento GROUP BY id_documento
query_firma_activarEstatusComentado													= UPDATE COMENTARIOS_DOCUMENTO SET estatus = 1 WHERE id_documento = :idDocumento AND usuario_comento = :usuarioComento
query_firma_eliminarFirma															= DELETE from datos_firma_doc where id_documento = :idDocumento
query_firma_desactivarFirmaBorrador													= UPDATE borrador_documentos SET con_firma = 0 WHERE id_documento = :idDocumento
query_firma_insertarBandejaOficialia												= INSERT INTO BANDEJA_ENTRADAS_OFICIALIA (id_oficialia, id_documento, anio, id_area_remitente, tipo_area_remitente, id_area_destinatario, tipo_area_destinatario, en_clasificacion, id_oficialia_clasificando, contiene_anexos, usuario, fecha_hora) values (:idOficialia, :idDocumento, :anio, :idAreaRemitente, :tipoAreaRemitente, :idAreaDestinatario, :tipoAreaDestinatario, :enClasificacion, :idOficialiaClasificando, :contieneAnexos, :usuario, :fechaHora)
query_firma_desactivarFirmaDocumento												= UPDATE documentos SET firmado = 0 WHERE id_documento = :idDocumento
query_firma_activarEdicionDocumento													= UPDATE documentos SET editado = 1 WHERE id_documento = :idDocumento
query_firma_desactivarEdicionDocumento												= UPDATE documentos SET editado = 0 WHERE id_documento = :idDocumento
query_firma_registrarRegresoRemitente												= UPDATE borrador_documentos SET fecha_regreso = :fechaRegreso, fecha_envio = NULL , num_enviado_firma = :numEnviadoFirma WHERE id_documento = :idDocumento
query_firma_consultarAreasOficialias												= select ea.id_area as idArea, ea.tipo_area as tipoArea from documentos_destinatarios dd join estructura_areas ea on dd.ID_PERSONA_DESTINATARIA = ea.ID_PERSONA join oficialias_areas oa on ea.id_area = oa.id_area join oficialias o on oa.id_oficialia = o.ID_OFICIALIA where dd.id_documento = :idDocumento group by ea.id_area, ea.tipo_area
query_firma_incrementarNotificacion													= UPDATE notificaciones_of SET documentos_pendientes = documentos_pendientes + 1 WHERE id_area = :idArea and tipo_area = :tipoArea and id_modulo = :idModulo
query_firma_marcarComoLeido															= UPDATE firma_documentos SET no_leido = :noLeido where id_documento = :idDocumento and id_persona = :idPersona 
query_firma_activarBloqueo															= UPDATE firma_documentos SET bloqueado = 1, id_persona_bloqueado = :idPersonaBloqueado  WHERE id_documento = :idDocumento  and id_persona != :idPersonaBloqueado
query_firma_desactivarBloqueo														= UPDATE firma_documentos SET bloqueado = null, id_persona_bloqueado = null  WHERE id_documento = :idDocumento

#---------------------------------------------------------------------------------
#						QUERY ValidacionDocumentos
#---------------------------------------------------------------------------------
query_validacion_documentos_insertar												= INSERT INTO VALIDACION_DOCUMENTOS (ID_PERSONA , ID_DOCUMENTO , ANIO , HASH_DOCUMENTO_RECIBIDO , ID_PERSONA_REMITENTE , USUARIO , FECHA_HORA, ESTATUS_REGRESADO, CON_MODIFICACIONES, ID_COMENTARIO, CON_VISUALIZACION) VALUES (:idPersona,:idDocumento,:anio,:hashDocumentoRecibido,:idPersonaRemitente, :usuario, sysdate, :estatusRegresado, :conModificaciones, :idComentario, :conVisualizacion)
query_validacion_activarValidacionDocumento											= UPDATE documentos SET validado = 1 WHERE id_documento = :idDocumento
query_validacion_activarValidacion													= UPDATE borrador_documentos SET con_validacion = 1 WHERE id_documento = :idDocumento
query_validacion_activarModificacion												= UPDATE borrador_documentos SET con_modificaciones = 1 WHERE id_documento = :idDocumento
query_validacion_desactivarValidacion												= UPDATE borrador_documentos SET con_validacion = 0 WHERE id_documento = :idDocumento
query_validacion_restarValidacion													= UPDATE borrador_documentos SET num_enviado_validacion = num_enviado_validacion - 1 WHERE id_documento = :idDocumento
query_validacion_eliminarValidacion													= DELETE validacion_documentos WHERE id_documento = :idDocumento AND id_persona = :idPersona AND id_persona_remitente = :idPersonaRemitente
query_validacion_actualizarValidaciones												= UPDATE validacion_documentos SET estatus_regresado = 1, persona_regreso_id = :personaRegresoId  WHERE id_persona_remitente = :idPersonaRemitente AND id_documento = :idDocumento AND id_persona <> :personaRegresoId
query_validacion_visualizacion														= UPDATE validacion_documentos SET con_visualizacion = 1 WHERE id_persona_remitente = :idPersonaRemitente AND id_documento = :idDocumento AND id_persona = :idPersona
query_validacion_edicion															= UPDATE validacion_documentos SET con_modificaciones = 1 WHERE id_persona_remitente = :idPersonaRemitente AND id_documento = :idDocumento AND id_persona = :idPersona
query_validacion_comentario															= UPDATE validacion_documentos SET id_comentario = :idComentario WHERE id_persona_remitente = :idPersonaRemitente AND id_documento = :idDocumento AND id_persona = :idPersona
query_validacion_comentario_quitar													= UPDATE validacion_documentos SET id_comentario = 0 WHERE id_persona_remitente = :idPersonaRemitente AND id_documento = :idDocumento AND id_persona = :idPersona
query_validacion_obtener_id_comentario												= SELECT id_documento, MAX(id_comentario) FROM comentarios_documento WHERE id_documento = idDocumento AND usuario_comento = :usuarioComento GROUP BY id_documento
query_validacion_poner_num_null														= UPDATE borrador_documentos SET num_enviado_validacion = null WHERE id_documento = :idDocumento

#---------------------------------------------------------------------------------
#						QUERY JerarquiaPersonas
#---------------------------------------------------------------------------------
query_consultar_titulares_estructura												= SELECT JER.ID_PERSONA_PADRE AS idPersonaPAdre, JER.NIVEL_PADRE AS nivelArea, ESTR.ID_PERSONA AS idPersona, ESTR.ID_AREA AS idArea, ESTR.TIPO_AREA AS tipoArea, AREAS.DESCRIPCION AS descripcionArea, AREAS.SIGLAS AS siglasArea, AREAS.ID_ENTIDAD AS idEntidadArea, ESTR.NOMBRE AS nombre, ESTR.APELLIDOS AS apellidos, ESTR.NOMBRE ||' ' || ESTR.APELLIDOS AS nombreCompleto, ESTR.PUESTO AS puesto, ESTR.CUENTA_LDAP AS cuentaLDAP, ESTR.TRATAMIENTO AS tratamiento, ESTR.EXTENSION_TEL AS extensionTel, ESTR.NOMBRE_NIVEL_AREA AS nombreNivelArea, ESTR.USUARIO AS usuario, ESTR.FECHA_HORA AS fechaHora, ESTR.GENERO AS genero, ESTR.VER_VERSION_T AS verVersionT FROM ESTRUCTURA_AREAS ESTR INNER JOIN JERARQUIA_PERSONAS JER ON ESTR.ID_PERSONA=JER.ID_PERSONA INNER JOIN C_AREAS AREAS ON AREAS.ID_AREA=ESTR.ID_AREA AND AREAS.TIPO_AREA=ESTR.TIPO_AREA WHERE JER.ID_PERSONA_PADRE=0 AND JER.NIVEL_PADRE=0 AND (AREAS.DESCRIPCION LIKE :coincidencia OR AREAS.SIGLAS LIKE :coincidencia)
query_consultar_titulares_destinatarios												= SELECT ESTR.ID_PERSONA AS idPersona, ESTR.ID_AREA AS idArea, ESTR.TIPO_AREA AS tipoArea, AREAS.DESCRIPCION AS descripcionArea, AREAS.SIGLAS AS siglasArea, AREAS.ID_ENTIDAD AS idEntidadArea, ESTR.NOMBRE AS nombre, ESTR.APELLIDOS AS apellidos, ESTR.NOMBRE ||' ' || ESTR.APELLIDOS AS nombreCompleto, ESTR.PUESTO AS puesto, ESTR.CUENTA_LDAP AS cuentaLDAP, ESTR.TRATAMIENTO AS tratamiento, ESTR.EXTENSION_TEL AS extensionTel, ESTR.NOMBRE_NIVEL_AREA AS nombreNivelArea, ESTR.USUARIO AS usuario, ESTR.FECHA_HORA AS fechaHora, ESTR.GENERO AS genero, ESTR.VER_VERSION_T AS verVersionT FROM ESTRUCTURA_AREAS ESTR INNER JOIN C_AREAS AREAS ON AREAS.ID_AREA=ESTR.ID_AREA AND AREAS.TIPO_AREA=ESTR.TIPO_AREA INNER JOIN JERARQUIA_PERSONAS JER ON ESTR.ID_PERSONA=JER.ID_PERSONA INNER JOIN (SELECT DISTINCT  ESTR.ID_AREA AS ID_AREA_DESTINATARIO, ESTR.TIPO_AREA AS TIPO_AREA_DESTINATARIO FROM DOCUMENTOS_DESTINATARIOS DEST INNER JOIN ESTRUCTURA_AREAS ESTR ON DEST.ID_PERSONA_DESTINATARIA=ESTR.ID_PERSONA WHERE ID_DOCUMENTO=:idDocumento) CONSULTA ON CONSULTA.ID_AREA_DESTINATARIO=ESTR.ID_AREA AND CONSULTA.TIPO_AREA_DESTINATARIO=ESTR.TIPO_AREA WHERE JER.ID_NIVEL=:idNivel

#---------------------------------------------------------------------------------
#						QUERY Borradores
#---------------------------------------------------------------------------------
query_consultar_borradores_ordenados_fecha											= SELECT BOR.ID_PERSONA AS idPersona, BOR.ID_DOCUMENTO AS idDocumento, BOR.anio as anio, BOR.CON_MODIFICACIONES AS conModificaciones, BOR.CON_COMENTARIOS AS conComentarios, BOR.CON_FIRMA AS conFirma, BOR.CON_VALIDACION AS conValidacion, BOR.CON_RECHAZO AS conRechazo, BOR.USUARIO AS usuario, BOR.FECHA_HORA AS fechaHora, BOR.NUM_ENVIADO_FIRMA AS numEnviadoFirma, BOR.NUM_ENVIADO_VALIDACION AS numEnviadoValidacion, BOR.SIGLAS_ENVIADOS AS siglasEnviados, BOR.ID_AREA AS idArea, BOR.TIPO_AREA AS tipoArea, BOR.FECHA_ENVIO AS fechaEnvio, BOR.FECHA_REGRESO AS fechaRegreso, BOR.NO_LEIDO AS noLeido, BOR.ESTATUS AS estatus, DOC.ID_AREA AS idAreaDocumento, DOC.TIPO_AREA AS tipoAreaDocumento, DOC.ID_TIPO_DOCUMENTO AS idTipoDocumento, DOC.ID_ACRONIMO AS idAcronimoDocumento, DOC.NUM_DOCUMENTO AS numDocumento, DOC.NOMBRE_DOCUMENTO AS nombreDocumento, DOC.ESTATUS AS estatusDocumento, DOC.TIPO_CAPTURA AS tipoCaptura, DOC.ASUNTO AS asunto, DOC.FECHA_CREACION AS fechaCreacion, DOC.CONTIENE_ANEXOS AS contieneAnexos, AREA.ID_ENTIDAD AS idEntidadArea, AREA.DESCRIPCION AS descripcionArea, AREA.SIGLAS AS siglasArea FROM BORRADOR_DOCUMENTOS BOR INNER JOIN DOCUMENTOS DOC ON BOR.ID_DOCUMENTO=DOC.ID_DOCUMENTO INNER JOIN  C_AREAS AREA ON AREA.ID_AREA=DOC.ID_AREA AND AREA.TIPO_AREA=DOC.TIPO_AREA WHERE DOC.ESTATUS=:estatusDocumento AND DOC.ID_PERSONA=:idPersona AND DOC.ID_AREA=:idArea AND DOC.TIPO_AREA=:tipoArea ORDER BY DOC.FECHA_CREACION
query_consultar_borradores_ordenados_nombre											= SELECT BOR.ID_PERSONA AS idPersona, BOR.ID_DOCUMENTO AS idDocumento, BOR.anio as anio, BOR.CON_MODIFICACIONES AS conModificaciones, BOR.CON_COMENTARIOS AS conComentarios, BOR.CON_FIRMA AS conFirma, BOR.CON_VALIDACION AS conValidacion, BOR.CON_RECHAZO AS conRechazo, BOR.USUARIO AS usuario, BOR.FECHA_HORA AS fechaHora, BOR.NUM_ENVIADO_FIRMA AS numEnviadoFirma, BOR.NUM_ENVIADO_VALIDACION AS numEnviadoValidacion, BOR.SIGLAS_ENVIADOS AS siglasEnviados, BOR.ID_AREA AS idArea, BOR.TIPO_AREA AS tipoArea, BOR.FECHA_ENVIO AS fechaEnvio, BOR.FECHA_REGRESO AS fechaRegreso, BOR.NO_LEIDO AS noLeido, BOR.ESTATUS AS estatus, DOC.ID_AREA AS idAreaDocumento, DOC.TIPO_AREA AS tipoAreaDocumento, DOC.ID_TIPO_DOCUMENTO AS idTipoDocumento, DOC.ID_ACRONIMO AS idAcronimoDocumento, DOC.NUM_DOCUMENTO AS numDocumento, DOC.NOMBRE_DOCUMENTO AS nombreDocumento, DOC.ESTATUS AS estatusDocumento, DOC.TIPO_CAPTURA AS tipoCaptura, DOC.ASUNTO AS asunto, DOC.FECHA_CREACION AS fechaCreacion, DOC.CONTIENE_ANEXOS AS contieneAnexos, AREA.ID_ENTIDAD AS idEntidadArea, AREA.DESCRIPCION AS descripcionArea, AREA.SIGLAS AS siglasArea FROM BORRADOR_DOCUMENTOS BOR INNER JOIN DOCUMENTOS DOC ON BOR.ID_DOCUMENTO=DOC.ID_DOCUMENTO INNER JOIN  C_AREAS AREA ON AREA.ID_AREA=DOC.ID_AREA AND AREA.TIPO_AREA=DOC.TIPO_AREA WHERE DOC.ESTATUS=:estatusDocumento AND DOC.ID_PERSONA=:idPersona AND DOC.ID_AREA=:idArea AND DOC.TIPO_AREA=:tipoArea ORDER BY DOC.NOMBRE_DOCUMENTO
query_consultar_borradores															= SELECT BOR.ID_PERSONA AS idPersona, BOR.ID_DOCUMENTO AS idDocumento, BOR.anio as anio, BOR.ID_AREA AS idArea, BOR.TIPO_AREA AS tipoArea, BOR.CON_MODIFICACIONES AS conModificaciones, BOR.CON_COMENTARIOS AS conComentarios, BOR.CON_FIRMA AS conFirma, BOR.CON_VALIDACION AS conValidacion, BOR.NUM_ENVIADO_FIRMA AS numEnviadoFirma, BOR.NUM_ENVIADO_VALIDACION AS numEnviadoValidacion, BOR.SIGLAS_ENVIADOS AS siglasEnviados, BOR.FECHA_ENVIO AS fechaEnvio, BOR.FECHA_REGRESO AS fechaRegreso, BOR.NO_LEIDO AS noLeido, BOR.CON_RECHAZO AS conRechazo, BOR.ESTATUS AS estatus, BOR.USUARIO AS usuario, BOR.FECHA_HORA AS fechaHora, DOC.ID_PERSONA AS idPersonaDoc, DOC.ID_OFICIALIA AS idOficialiaDoc, DOC.ID_AREA AS idAreaDoc, DOC.TIPO_AREA AS tipoAreaDoc, DOC.ID_TIPO_DOCUMENTO AS idTipoDocumento, DOC.ID_ACRONIMO AS idAcronimoDoc, DOC.NUM_DOCUMENTO AS numDocumento, DOC.NOMBRE_DOCUMENTO AS nombreDocumento, DOC.ESTATUS AS estatusDoc, DOC.FIRMADO AS firmadoDoc, DOC.VALIDADO AS validadoDoc, DOC.TIPO_CAPTURA AS tipoCapturaDoc, DOC.ASUNTO AS asuntoDoc, DOC.PROCEDENCIA_DOCUMENTO AS procedenciaDocumento, DOC.EDITADO AS editadoDoc, DOC.FECHA_CREACION AS fechaCreacionDoc, DOC.FECHA_RECEPCION_OF AS fechaRecepcionOfDoc, DOC.CONTIENE_ANEXOS AS contieneAnexosDoc, DOC.ID_DOCUMENTO_RESPUESTA AS idDocumentoRespuesta, DOC.USUARIO AS usuarioDoc, DOC.FECHA_HORA AS fechaHoraDoc, AREA.ID_ENTIDAD AS idEntidadArea, AREA.DESCRIPCION AS descripcionArea, AREA.SIGLAS AS siglasArea FROM BORRADOR_DOCUMENTOS BOR INNER JOIN DOCUMENTOS DOC ON BOR.ID_DOCUMENTO=DOC.ID_DOCUMENTO INNER JOIN  C_AREAS AREA ON AREA.ID_AREA=DOC.ID_AREA AND AREA.TIPO_AREA=DOC.TIPO_AREA <condiciones> <orden>
query_consultar_numero_borradores_porusuario										= SELECT COUNT(*) AS numBorradores FROM BORRADOR_DOCUMENTOS WHERE ID_PERSONA = :idPersona

#---------------------------------------------------------------------------------
#						QUERY Documentos
#---------------------------------------------------------------------------------
query_documento_actualizar_estatus													= UPDATE DOCUMENTOS SET ESTATUS=:estatusDocumento WHERE ID_DOCUMENTO=:idDocumento
query_documento_obtener_detalle														= SELECT (SELECT LISTAGG (persona_rem.NOMBRE || ' ' || persona_rem.APELLIDOS, ' , ') WITHIN GROUP (ORDER BY persona_rem.ID_PERSONA) FROM DOCUMENTOS_REMITENTES rem INNER JOIN ESTRUCTURA_AREAS persona_rem ON rem.ID_PERSONA_REMITENTE = persona_rem.ID_PERSONA WHERE rem.ID_DOCUMENTO = doc.ID_DOCUMENTO) remitentes, (SELECT LISTAGG (persona_des.NOMBRE || ' ' || persona_des.APELLIDOS, ' , ') WITHIN GROUP (ORDER BY persona_des.ID_PERSONA) FROM DOCUMENTOS_DESTINATARIOS des INNER JOIN ESTRUCTURA_AREAS persona_des ON des.ID_PERSONA_DESTINATARIA = persona_des.ID_PERSONA WHERE des.ID_DOCUMENTO = doc.ID_DOCUMENTO ) destinatarios, (SELECT LISTAGG (persona_ccp.NOMBRE || ' ' || persona_ccp.APELLIDOS, ' , ') WITHIN GROUP (ORDER BY persona_ccp.ID_PERSONA) FROM DOCUMENTOS_CCP ccp INNER JOIN ESTRUCTURA_AREAS persona_ccp ON ccp.ID_PERSONA = persona_ccp.ID_PERSONA WHERE ccp.ID_DOCUMENTO = doc.ID_DOCUMENTO) ccps FROM documentos doc WHERE doc.ID_DOCUMENTO = :idDocumento GROUP BY doc.ID_DOCUMENTO

#---------------------------------------------------------------------------------
#						QUERY EDICIONES
#---------------------------------------------------------------------------------
query_consulta_ediciones															= SELECT EDI.ID_DOCUMENTO AS idDocumento, EDI.ANIO AS anio, EDI.ID_EDICION AS idEdicion, EDI.ESTATUS AS estatus, EDI.USUARIO_EDICION AS usuarioEdicion, EDI.FECHA_HORA_EDICION AS fechaHoraEdicion , EDI.USUARIO AS usuario, EDI.FECHA_HORA as fechaHora, ESTR.TRATAMIENTO ||' ' || ESTR.NOMBRE ||' ' || ESTR.APELLIDOS AS nombreCompleto FROM EDICIONES_DOCUMENTO EDI INNER JOIN ESTRUCTURA_AREAS ESTR ON EDI.USUARIO_EDICION=ESTR.CUENTA_LDAP WHERE EDI.ID_DOCUMENTO=:idDocumento AND EDI.ESTATUS=:estatus ORDER BY FECHA_HORA_EDICION DESC

#---------------------------------------------------------------------------------
#						QUERY COMENTARIOS
#---------------------------------------------------------------------------------
query_consulta_comentarios_documento												= SELECT COM.ID_DOCUMENTO AS idDocumento, COM.ANIO AS anio, COM.ID_COMENTARIO AS idComentario, COM.COMENTARIOS AS comentarios, COM.ESTATUS AS estatus, COM.USUARIO_COMENTO AS usuarioComento, COM.USUARIO AS usuario, COM.FECHA_HORA as fechaHora, ESTR.TRATAMIENTO ||' ' || ESTR.NOMBRE ||' ' || ESTR.APELLIDOS AS nombreCompleto FROM COMENTARIOS_DOCUMENTO COM INNER JOIN ESTRUCTURA_AREAS ESTR ON COM.USUARIO_COMENTO=ESTR.CUENTA_LDAP WHERE COM.ID_DOCUMENTO=:idDocumento AND COM.ESTATUS=:estatus ORDER BY COM.FECHA_HORA DESC
query_consulta_id_comentario														= SELECT ID_COMENTARIO AS idComentario FROM COMENTARIOS_DOCUMENTO WHERE ID_DOCUMENTO=:idDocumento AND USUARIO_COMENTO=:usuarioComento and TIPO_COMENTARIO=:tipoComentario
query_consulta_siguiente_id_comentario												= Select COALESCE(Max(id_comentario), 0)+1 from COMENTARIOS_DOCUMENTO where id_documento=:idDocumento

#---------------------------------------------------------------------------------
#						QUERY COMENTARIOS_NO_LEIDOS
#---------------------------------------------------------------------------------
query_consulta_comentarios_estatus													= SELECT EST.ID_COMENTARIO AS idComentario, EST.ID_DOCUMENTO AS idDocumento, EST.ID_PERSONA AS idPersona, EST.ID_AREA AS idArea, EST.TIPO_AREA AS tipoArea, EST.NO_LEIDO AS noLeido, EST.USUARIO usuario, EST.FECHA_HORA AS fechaHora, COM.ANIO AS anioCom, COM.COMENTARIOS AS comentarios, COM.ESTATUS AS estatusCom, COM.USUARIO_COMENTO AS usuarioComento, COM.TIPO_COMENTARIO AS tipoComentario, COM.USUARIO AS usuarioCom, COM.FECHA_HORA AS fechaHoraCom, ESTR.ID_PERSONA AS idPersonaEstr, ESTR.TIPO_AREA AS tipoAreaEstr, ESTR.NOMBRE AS nombreEstr, ESTR.APELLIDOS as apellidosEstr, INITCAP(ESTR.NOMBRE || ' ' || ESTR.APELLIDOS) AS nombreCompletoEstr, ESTR.CUENTA_LDAP cuentraLDAPEstr FROM COMENTARIOS_NO_LEIDOS EST INNER JOIN COMENTARIOS_DOCUMENTO COM ON COM.ID_COMENTARIO=EST.ID_COMENTARIO AND COM.ID_DOCUMENTO=EST.ID_DOCUMENTO INNER JOIN ESTRUCTURA_AREAS ESTR ON ESTR.CUENTA_LDAP=COM.USUARIO_COMENTO WHERE EST.ID_DOCUMENTO=:idDocumento AND EST.ID_PERSONA=:idPersona AND EST.ID_AREA=:idArea AND EST.TIPO_AREA=:tipoArea AND EST.NO_LEIDO=:noLeido
query_insertar_comentario_estatus													= INSERT INTO COMENTARIOS_NO_LEIDOS(ID_COMENTARIO, ID_DOCUMENTO, ID_PERSONA, ID_AREA, TIPO_AREA, NO_LEIDO, USUARIO, FECHA_HORA) VALUES (:idComentario, :idDocumento, :idPersona, :idArea, :tipoArea, :noLeido, :usuario, :fechaHora)

#---------------------------------------------------------------------------------
#						QUERY ENVIADOS
#---------------------------------------------------------------------------------
query_consultar_enviados_ordenados_fecha											= SELECT ENV.ID_PERSONA AS idPersona, ENV.ID_DOCUMENTO AS idDocumento, ENV.ANIO AS anio, ENV.USUARIO_ENVIO AS usuarioEnvio, ENV.USUARIO AS usuario, ENV.FECHA_HORA as fechaHora, ENV.ID_AREA AS idArea, ENV.TIPO_AREA AS tipoArea, ENV.NUM_ENVIADO_FIRMA AS numEnviadoFirma, ENV.NUM_ENVIADO_VALIDACION AS numEnviadoValidacion, ENV.NO_LEIDO AS noLeido, ENV.ESTATUS AS estatus, DOC.ID_AREA AS idAreaDocumento, DOC.TIPO_AREA AS tipoAreaDocumento, DOC.ID_TIPO_DOCUMENTO AS idTipoDocumento, DOC.ID_ACRONIMO AS idAcronimoDocumento, DOC.NUM_DOCUMENTO AS numDocumento, DOC.NOMBRE_DOCUMENTO AS nombreDocumento, DOC.ESTATUS AS estatusDocumento, DOC.TIPO_CAPTURA AS tipoCaptura, DOC.ASUNTO AS asunto, DOC.FECHA_CREACION AS fechaCreacion, DOC.CONTIENE_ANEXOS AS contieneAnexos, AREA.ID_ENTIDAD AS idEntidadArea, AREA.DESCRIPCION AS descripcionArea, AREA.SIGLAS AS siglasArea FROM ENVIADOS_DOCUMENTOS ENV INNER JOIN DOCUMENTOS DOC ON ENV.ID_DOCUMENTO=DOC.ID_DOCUMENTO INNER JOIN  C_AREAS AREA ON AREA.ID_AREA=DOC.ID_AREA AND AREA.TIPO_AREA=DOC.TIPO_AREA WHERE ENV.ID_PERSONA=:idPersona ORDER BY ENV.FECHA_HORA
query_consultar_enviados_ordenados_nombre											= SELECT ENV.ID_PERSONA AS idPersona, ENV.ID_DOCUMENTO AS idDocumento, ENV.ANIO AS anio, ENV.USUARIO_ENVIO AS usuarioEnvio, ENV.USUARIO AS usuario, ENV.FECHA_HORA as fechaHora, ENV.ID_AREA AS idArea, ENV.TIPO_AREA AS tipoArea, ENV.NUM_ENVIADO_FIRMA AS numEnviadoFirma, ENV.NUM_ENVIADO_VALIDACION AS numEnviadoValidacion, ENV.NO_LEIDO AS noLeido, DOC.ID_AREA AS idAreaDocumento, DOC.TIPO_AREA AS tipoAreaDocumento, DOC.ID_TIPO_DOCUMENTO AS idTipoDocumento, DOC.ID_ACRONIMO AS idAcronimoDocumento, DOC.NUM_DOCUMENTO AS numDocumento, DOC.NOMBRE_DOCUMENTO AS nombreDocumento, DOC.ESTATUS AS estatusDocumento, DOC.TIPO_CAPTURA AS tipoCaptura, DOC.ASUNTO AS asunto, DOC.FECHA_CREACION AS fechaCreacion, DOC.CONTIENE_ANEXOS AS contieneAnexos, AREA.ID_ENTIDAD AS idEntidadArea, AREA.DESCRIPCION AS descripcionArea, AREA.SIGLAS AS siglasArea FROM ENVIADOS_DOCUMENTOS ENV INNER JOIN DOCUMENTOS DOC ON ENV.ID_DOCUMENTO=DOC.ID_DOCUMENTO INNER JOIN  C_AREAS AREA ON AREA.ID_AREA=DOC.ID_AREA AND AREA.TIPO_AREA=DOC.TIPO_AREA WHERE ENV.ID_PERSONA=:idPersona ORDER BY DOC.NOMBRE_DOCUMENTO
query_consultar_enviados															= SELECT ENV.ID_PERSONA AS idPersona, ENV.ID_DOCUMENTO AS idDocumento, ENV.anio as anio, ENV.ID_AREA AS idArea, ENV.TIPO_AREA AS tipoArea, ENV.USUARIO_ENVIO AS usuarioEnvio, ENV.NUM_ENVIADO_FIRMA AS numEnviadoFirma, ENV.NUM_ENVIADO_VALIDACION AS numEnviadoValidacion, ENV.NO_LEIDO AS noLeido, ENV.ESTATUS AS estatus, ENV.USUARIO AS usuario, ENV.FECHA_HORA AS fechaHora, DOC.ID_PERSONA AS idPersonaDoc, DOC.ID_OFICIALIA AS idOficialiaDoc, DOC.ID_AREA AS idAreaDoc, DOC.TIPO_AREA AS tipoAreaDoc, DOC.ID_TIPO_DOCUMENTO AS idTipoDocumento, DOC.ID_ACRONIMO AS idAcronimoDoc, DOC.NUM_DOCUMENTO AS numDocumento, DOC.NOMBRE_DOCUMENTO AS nombreDocumento, DOC.ESTATUS AS estatusDoc, DOC.FIRMADO AS firmadoDoc, DOC.VALIDADO AS validadoDoc, DOC.TIPO_CAPTURA AS tipoCapturaDoc, DOC.ASUNTO AS asuntoDoc, DOC.PROCEDENCIA_DOCUMENTO AS procedenciaDocumento, DOC.EDITADO AS editadoDoc, DOC.FECHA_CREACION AS fechaCreacionDoc, DOC.FECHA_RECEPCION_OF AS fechaRecepcionOfDoc, DOC.CONTIENE_ANEXOS AS contieneAnexosDoc, DOC.ID_DOCUMENTO_RESPUESTA AS idDocumentoRespuesta, DOC.USUARIO AS usuarioDoc, DOC.FECHA_HORA AS fechaHoraDoc, AREA.ID_ENTIDAD AS idEntidadArea, AREA.DESCRIPCION AS descripcionArea, AREA.SIGLAS AS siglasArea FROM ENVIADOS_DOCUMENTOS ENV INNER JOIN DOCUMENTOS DOC ON ENV.ID_DOCUMENTO=DOC.ID_DOCUMENTO INNER JOIN  C_AREAS AREA ON AREA.ID_AREA=DOC.ID_AREA AND AREA.TIPO_AREA=DOC.TIPO_AREA <condiciones> <orden>
query_consultar_numero_enviados_porusuario											= SELECT COUNT(*) AS numEnviados FROM ENVIADOS_DOCUMENTOS WHERE ID_PERSONA = :idPersona

#---------------------------------------------------------------------------------
#						QUERY DOCUMENTOS DESTINATARIOS
#---------------------------------------------------------------------------------
query_consultar_documentos_destinatarios											= SELECT DEST.ID_DOCUMENTO AS idDocumento, DEST.ANIO AS anio, DEST.ID_PERSONA_DESTINATARIA AS idPersonaDestinataria, DEST.TIPO_DESTINATARIO AS tipoDestinatario, DEST.USUARIO AS usuario, DEST.FECHA_HORA AS fechaHora, ESTR.ID_AREA AS idArea, ESTR.TIPO_AREA AS tipoArea, ESTR.ID_PERSONA AS idPersona, ESTR.NOMBRE AS nombre, ESTR.APELLIDOS AS apellidos, ESTR.NOMBRE|| ' '||ESTR.APELLIDOS AS nombreCompleto, ESTR.PUESTO AS puesto, ESTR.TRATAMIENTO AS tratamiento, ESTR.EXTENSION_TEL AS extensionTel, ESTR.GENERO AS genero, ESTR.CUENTA_LDAP AS cuentaLDAP, ESTR.NOMBRE_NIVEL_AREA AS nombreNivelArea, ESTR.VER_VERSION_T AS verVersionT, ESTR.ESTATUS AS estatus, ESTR.USUARIO AS usuarioEstr, ESTR.FECHA_HORA AS fechaHoraEstr,  AREAS.DESCRIPCION AS descripcionArea, AREAS.SIGLAS AS siglasArea, AREAS.ID_ENTIDAD AS idEntidadArea FROM DOCUMENTOS_DESTINATARIOS DEST INNER JOIN ESTRUCTURA_AREAS ESTR ON DEST.ID_PERSONA_DESTINATARIA=ESTR.ID_PERSONA INNER JOIN C_AREAS AREAS ON AREAS.ID_AREA=ESTR.ID_AREA AND AREAS.TIPO_AREA=ESTR.TIPO_AREA WHERE ID_DOCUMENTO=:idDocumento 

#---------------------------------------------------------------------------------
#						QUERY DOCUMENTOS ANEXOS
#---------------------------------------------------------------------------------
query_consultar_anexos_pordocumento													= SELECT ANEXO.ID_DOCUMENTO AS idDocumento, ANEXO.ID_ANEXO AS idAnexo, ANEXO.ANIO AS anio, ANEXO.NOMBRE_DOC_ANEXO AS nombreDocAnexo, ANEXO.NOMBRE_GLUSTER_ANEXO AS nombreAnexo, ANEXO.TAMANIO AS tamanio, ANEXO.USUARIO AS usuario, ANEXO.FECHA_HORA AS fechaHora FROM DOCUMENTOS_ANEXOS ANEXO WHERE ID_DOCUMENTO=:idDocumento

#---------------------------------------------------------------------------------
#						QUERY DOCUMENTOS CCP
#---------------------------------------------------------------------------------
query_consultar_personas_ccp														= SELECT ESTR.ID_PERSONA AS idPersona, ESTR.ID_AREA AS idArea, ESTR.TIPO_AREA AS tipoArea, ESTR.NOMBRE AS nombre, ESTR.APELLIDOS AS apellidos, ESTR.NOMBRE ||' ' || ESTR.APELLIDOS AS nombreCompleto, ESTR.PUESTO AS puesto,  ESTR.TRATAMIENTO AS tratamiento, ESTR.EXTENSION_TEL AS extensionTel, ESTR.GENERO AS genero, ESTR.CUENTA_LDAP AS cuentaLDAP, ESTR.NOMBRE_NIVEL_AREA AS nombreNivelArea, ESTR.VER_VERSION_T AS verVersionT, ESTR.ESTATUS AS estatus, ESTR.USUARIO AS usuario, ESTR.FECHA_HORA AS fechaHora,  AREAS.DESCRIPCION AS descripcionArea, AREAS.SIGLAS AS siglasArea, AREAS.ID_ENTIDAD AS idEntidadArea FROM DOCUMENTOS_CCP CCP INNER JOIN ESTRUCTURA_AREAS ESTR ON CCP.ID_PERSONA=ESTR.ID_PERSONA INNER JOIN C_AREAS AREAS ON AREAS.ID_AREA=ESTR.ID_AREA AND AREAS.TIPO_AREA=ESTR.TIPO_AREA WHERE CCP.ID_DOCUMENTO=:idDocumento

#---------------------------------------------------------------------------------
#						QUERY DOCUMENTOS REMITENTES
#---------------------------------------------------------------------------------
query_consultar_personas_remitentes													= SELECT ESTR.ID_PERSONA AS idPersona, ESTR.ID_AREA AS idArea, ESTR.TIPO_AREA AS tipoArea, ESTR.NOMBRE AS nombre, ESTR.APELLIDOS AS apellidos, ESTR.NOMBRE|| ' '||ESTR.APELLIDOS as nombreCompleto, ESTR.PUESTO AS puesto, ESTR.TRATAMIENTO AS tratamiento, ESTR.EXTENSION_TEL AS extensionTel, ESTR.GENERO AS genero, ESTR.CUENTA_LDAP AS cuentaLDAP, ESTR.NOMBRE_NIVEL_AREA AS nombreNivelArea, ESTR.VER_VERSION_T AS verVersionT, ESTR.ESTATUS AS estatus, ESTR.USUARIO AS usuario, ESTR.FECHA_HORA AS fechaHora, AREAS.DESCRIPCION AS descripcionArea, AREAS.SIGLAS AS siglasArea, AREAS.ID_ENTIDAD AS idEntidadArea FROM DOCUMENTOS_REMITENTES REM INNER JOIN ESTRUCTURA_AREAS ESTR ON ESTR.ID_PERSONA=REM.ID_PERSONA_REMITENTE INNER JOIN C_AREAS AREAS ON AREAS.ID_AREA=ESTR.ID_AREA AND AREAS.TIPO_AREA=ESTR.TIPO_AREA WHERE ID_DOCUMENTO=:idDocumento

#---------------------------------------------------------------------------------
#						QUERY BANDEJA DE ENTRADA
#---------------------------------------------------------------------------------
query_consultar_numero_bandeja_e_porusuario											= SELECT COUNT(*) AS numRecibidos FROM BANDEJA_E_ATENCION WHERE ID_PERSONA = :idPersona UNION SELECT COUNT(*) AS numRecibidos FROM BANDEJA_E_CCP WHERE ID_PERSONA = :idPersona UNION SELECT COUNT(*) AS numRecibidos FROM BANDEJA_E_INFO WHERE ID_PERSONA = :idPersona UNION SELECT COUNT(*) AS numRecibidos FROM BANDEJA_E_RECIBIDOS WHERE ID_PERSONA = :idPersona

#---------------------------------------------------------------------------------
#						QUERY BANDEJA DE RECIBIDOS
#---------------------------------------------------------------------------------
query_consultar_bandeja_e_recibidos													= SELECT * FROM ( SELECT row_.*, rownum rownum_ FROM (SELECT * FROM (SELECT EREC.ID_DOCUMENTO AS idDocumento, EREC.ID_PERSONA AS idPersona, EREC.anio as anio, EREC.FECHA_RECEPCION as fechaRecepcion, EREC.USUARIO AS usuario, EREC.FECHA_HORA AS fechaHora, EREC.ID_AREA AS idArea, EREC.TIPO_AREA AS tipoArea, EREC.NO_LEIDO AS noLeido, EREC.EN_ATENCION AS enAtencion, EREC.ID_HISTORICO_RECEP AS idHistoricoRecep, EREC.TIENE_RESPUESTA AS tieneRespuesta, DOC.ID_AREA AS idAreaDocumento, DOC.TIPO_AREA AS tipoAreaDocumento, DOC.ID_TIPO_DOCUMENTO AS idTipoDocumento, DOC.ID_ACRONIMO AS idAcronimoDocumento, DOC.NUM_DOCUMENTO AS numDocumento, DOC.NOMBRE_DOCUMENTO AS nombreDocumento, DOC.ESTATUS AS estatusDocumento, DOC.TIPO_CAPTURA AS tipoCaptura, DOC.ASUNTO AS asunto, DOC.FECHA_CREACION AS fechaCreacion, DOC.CONTIENE_ANEXOS AS contieneAnexos, AREA.ID_ENTIDAD AS idEntidadArea, AREA.DESCRIPCION AS descripcionArea, AREA.SIGLAS AS siglasArea FROM BANDEJA_E_RECIBIDOS   EREC INNER JOIN DOCUMENTOS DOC ON EREC.ID_DOCUMENTO=DOC.ID_DOCUMENTO INNER JOIN  C_AREAS AREA ON AREA.ID_AREA=DOC.ID_AREA AND AREA.TIPO_AREA=DOC.TIPO_AREA <condiciones> <orden>) WHERE rownum <=:maxRows ) row_ ) WHERE rownum_ > :minRows
query_consultar_num_bandeja_e_recibidos												= SELECT COUNT(*) AS totalRecibidos FROM BANDEJA_E_RECIBIDOS <condiciones>

#---------------------------------------------------------------------------------
#						QUERY BANDEJA DE CCP
#---------------------------------------------------------------------------------
query_consultar_bandeja_e_ccp														= SELECT * FROM ( SELECT row_.*, rownum rownum_ FROM (SELECT * FROM (SELECT CCP.ID_DOCUMENTO AS idDocumento, CCP.ID_PERSONA AS idPersona, CCP.anio as anio, CCP.FECHA_RECEPCION as fechaRecepcion, CCP.USUARIO AS usuario, CCP.FECHA_HORA AS fechaHora, CCP.ID_AREA AS idArea, CCP.TIPO_AREA AS tipoArea, CCP.NO_LEIDO AS noLeido, DOC.ID_AREA AS idAreaDocumento, DOC.TIPO_AREA AS tipoAreaDocumento, DOC.ID_TIPO_DOCUMENTO AS idTipoDocumento, DOC.ID_ACRONIMO AS idAcronimoDocumento, DOC.NUM_DOCUMENTO AS numDocumento, DOC.NOMBRE_DOCUMENTO AS nombreDocumento, DOC.ESTATUS AS estatusDocumento, DOC.TIPO_CAPTURA AS tipoCaptura, DOC.ASUNTO AS asunto, DOC.FECHA_CREACION AS fechaCreacion, DOC.CONTIENE_ANEXOS AS contieneAnexos, AREA.ID_ENTIDAD AS idEntidadArea, AREA.DESCRIPCION AS descripcionArea, AREA.SIGLAS AS siglasArea FROM BANDEJA_E_CCP CCP INNER JOIN DOCUMENTOS DOC ON CCP.ID_DOCUMENTO=DOC.ID_DOCUMENTO INNER JOIN  C_AREAS AREA ON AREA.ID_AREA=DOC.ID_AREA AND AREA.TIPO_AREA=DOC.TIPO_AREA <condiciones> <orden>) WHERE rownum <=:maxRows ) row_ ) WHERE rownum_ > :minRows
query_consultar_num_bandeja_e_ccp													= SELECT COUNT(*) AS totalCCP FROM BANDEJA_E_CCP <condiciones>

#---------------------------------------------------------------------------------
#						QUERY BANDEJA DE ATENCION
#---------------------------------------------------------------------------------
query_consultar_bandeja_e_atencion													= SELECT * FROM ( SELECT row_.*, rownum rownum_ FROM (SELECT * FROM (SELECT ATN.ID_DOCUMENTO AS idDocumento, ATN.ID_PERSONA AS idPersona, ATN.anio as anio, ATN.FECHA_RECEPCION as fechaRecepcion, ATN.USUARIO AS usuario, ATN.FECHA_HORA AS fechaHora, ATN.ID_AREA AS idArea, ATN.TIPO_AREA AS tipoArea, ATN.NO_LEIDO AS noLeido, ATN.EN_ATENCION AS enAtencion, ATN.ID_HISTORICO_PADRE AS idHistoricoPadre, ATN.ID_HISTORICO_RECEP AS idHistoricoRecep, ATN.TIENE_RESPUESTA AS tieneRespuesta, DOC.ID_AREA AS idAreaDocumento, DOC.TIPO_AREA AS tipoAreaDocumento, DOC.ID_TIPO_DOCUMENTO AS idTipoDocumento, DOC.ID_ACRONIMO AS idAcronimoDocumento, DOC.NUM_DOCUMENTO AS numDocumento, DOC.NOMBRE_DOCUMENTO AS nombreDocumento, DOC.ESTATUS AS estatusDocumento, DOC.TIPO_CAPTURA AS tipoCaptura, DOC.ASUNTO AS asunto, DOC.FECHA_CREACION AS fechaCreacion, DOC.CONTIENE_ANEXOS AS contieneAnexos, AREA.ID_ENTIDAD AS idEntidadArea, AREA.DESCRIPCION AS descripcionArea, AREA.SIGLAS AS siglasArea FROM BANDEJA_E_ATENCION ATN INNER JOIN DOCUMENTOS DOC ON ATN.ID_DOCUMENTO=DOC.ID_DOCUMENTO INNER JOIN  C_AREAS AREA ON AREA.ID_AREA=DOC.ID_AREA AND AREA.TIPO_AREA=DOC.TIPO_AREA <condiciones> <orden>) WHERE rownum <=:maxRows ) row_ ) WHERE rownum_ > :minRows
query_consultar_num_bandeja_e_atencion												= SELECT COUNT(*) AS totalAtencion FROM BANDEJA_E_ATENCION <condiciones>

#---------------------------------------------------------------------------------
#						QUERY BANDEJA DE INFO
#---------------------------------------------------------------------------------
query_consultar_bandeja_e_info														= SELECT * FROM ( SELECT row_.*, rownum rownum_ FROM (SELECT * FROM (SELECT INFO.ID_DOCUMENTO AS idDocumento, INFO.ID_PERSONA AS idPersona, INFO.anio as anio, INFO.FECHA_RECEPCION as fechaRecepcion, INFO.USUARIO AS usuario, INFO.FECHA_HORA AS fechaHora, INFO.ID_AREA AS idArea, INFO.TIPO_AREA AS tipoArea, INFO.NO_LEIDO AS noLeido, INFO.ID_HISTORICO_PADRE AS idHistoricoPadre, INFO.ID_HISTORICO_RECEP AS idHistoricoRecep, DOC.ID_AREA AS idAreaDocumento, DOC.TIPO_AREA AS tipoAreaDocumento, DOC.ID_TIPO_DOCUMENTO AS idTipoDocumento, DOC.ID_ACRONIMO AS idAcronimoDocumento, DOC.NUM_DOCUMENTO AS numDocumento, DOC.NOMBRE_DOCUMENTO AS nombreDocumento, DOC.ESTATUS AS estatusDocumento, DOC.TIPO_CAPTURA AS tipoCaptura, DOC.ASUNTO AS asunto, DOC.FECHA_CREACION AS fechaCreacion, DOC.CONTIENE_ANEXOS AS contieneAnexos, AREA.ID_ENTIDAD AS idEntidadArea, AREA.DESCRIPCION AS descripcionArea, AREA.SIGLAS AS siglasArea FROM BANDEJA_E_INFO INFO INNER JOIN DOCUMENTOS DOC ON INFO.ID_DOCUMENTO=DOC.ID_DOCUMENTO INNER JOIN  C_AREAS AREA ON AREA.ID_AREA=DOC.ID_AREA AND AREA.TIPO_AREA=DOC.TIPO_AREA <condiciones> <orden>) WHERE rownum <=:maxRows ) row_ ) WHERE rownum_ > :minRows
query_consultar_num_bandeja_e_info													= SELECT COUNT(*) AS totalInfo FROM BANDEJA_E_INFO <condiciones>

#---------------------------------------------------------------------------------
#						QUERY BANDEJA DE HISTORICO RECIBIDOS
#---------------------------------------------------------------------------------
query_consultar_bandeja_e_hrecibidos												= SELECT * FROM ( SELECT row_.*, rownum rownum_ FROM (SELECT * FROM (SELECT EREC.ID_DOCUMENTO AS idDocumento, EREC.ID_PERSONA AS idPersona, EREC.anio as anio, EREC.FECHA_RECEPCION as fechaRecepcion, EREC.USUARIO AS usuario, EREC.FECHA_HORA AS fechaHora, EREC.ID_AREA AS idArea, EREC.TIPO_AREA AS tipoArea, EREC.NO_LEIDO AS noLeido, EREC.EN_ATENCION AS enAtencion, EREC.ID_HISTORICO_RECEP AS idHistoricoRecep, EREC.TIENE_RESPUESTA AS tieneRespuesta, DOC.ID_AREA AS idAreaDocumento, DOC.TIPO_AREA AS tipoAreaDocumento, DOC.ID_TIPO_DOCUMENTO AS idTipoDocumento, DOC.ID_ACRONIMO AS idAcronimoDocumento, DOC.NUM_DOCUMENTO AS numDocumento, DOC.NOMBRE_DOCUMENTO AS nombreDocumento, DOC.ESTATUS AS estatusDocumento, DOC.TIPO_CAPTURA AS tipoCaptura, DOC.ASUNTO AS asunto, DOC.FECHA_CREACION AS fechaCreacion, DOC.CONTIENE_ANEXOS AS contieneAnexos, AREA.ID_ENTIDAD AS idEntidadArea, AREA.DESCRIPCION AS descripcionArea, AREA.SIGLAS AS siglasArea FROM H_BANDEJA_E_RECIBIDOS EREC INNER JOIN DOCUMENTOS DOC ON EREC.ID_DOCUMENTO=DOC.ID_DOCUMENTO INNER JOIN  C_AREAS AREA ON AREA.ID_AREA=DOC.ID_AREA AND AREA.TIPO_AREA=DOC.TIPO_AREA <condiciones> <orden>) WHERE rownum <=:maxRows ) row_ ) WHERE rownum_ > :minRows
query_consultar_num_bandeja_e_hrecibidos											= SELECT COUNT(*) AS totalRecibidos FROM H_BANDEJA_E_RECIBIDOS <condiciones>

#---------------------------------------------------------------------------------
#						QUERY BANDEJA DE HISTORICO CCP
#---------------------------------------------------------------------------------
query_consultar_bandeja_e_hccp														= SELECT * FROM ( SELECT row_.*, rownum rownum_ FROM (SELECT * FROM (SELECT CCP.ID_DOCUMENTO AS idDocumento, CCP.ID_PERSONA AS idPersona, CCP.anio as anio, CCP.FECHA_RECEPCION as fechaRecepcion, CCP.USUARIO AS usuario, CCP.FECHA_HORA AS fechaHora, CCP.ID_AREA AS idArea, CCP.TIPO_AREA AS tipoArea, DOC.ID_AREA AS idAreaDocumento, DOC.TIPO_AREA AS tipoAreaDocumento, DOC.ID_TIPO_DOCUMENTO AS idTipoDocumento, DOC.ID_ACRONIMO AS idAcronimoDocumento, DOC.NUM_DOCUMENTO AS numDocumento, DOC.NOMBRE_DOCUMENTO AS nombreDocumento, DOC.ESTATUS AS estatusDocumento, DOC.TIPO_CAPTURA AS tipoCaptura, DOC.ASUNTO AS asunto, DOC.FECHA_CREACION AS fechaCreacion, DOC.CONTIENE_ANEXOS AS contieneAnexos, AREA.ID_ENTIDAD AS idEntidadArea, AREA.DESCRIPCION AS descripcionArea, AREA.SIGLAS AS siglasArea FROM H_BANDEJA_E_CCP CCP INNER JOIN DOCUMENTOS DOC ON CCP.ID_DOCUMENTO=DOC.ID_DOCUMENTO INNER JOIN  C_AREAS AREA ON AREA.ID_AREA=DOC.ID_AREA AND AREA.TIPO_AREA=DOC.TIPO_AREA <condiciones> <orden>) WHERE rownum <=:maxRows ) row_ ) WHERE rownum_ > :minRows
query_consultar_num_bandeja_e_hccp													= SELECT COUNT(*) AS totalCCP FROM H_BANDEJA_E_CCP <condiciones>

#---------------------------------------------------------------------------------
#						QUERY BANDEJA DE HISTORICO ATENCION
#---------------------------------------------------------------------------------
query_consultar_bandeja_e_hatencion													= SELECT * FROM ( SELECT row_.*, rownum rownum_ FROM (SELECT * FROM ( SELECT ATN.ID_DOCUMENTO AS idDocumento, ATN.ID_PERSONA AS idPersona, ATN.anio as anio, ATN.FECHA_RECEPCION as fechaRecepcion, ATN.USUARIO AS usuario, ATN.FECHA_HORA AS fechaHora, ATN.ID_AREA AS idArea, ATN.TIPO_AREA AS tipoArea, ATN.NO_LEIDO AS noLeido, ATN.EN_ATENCION AS enAtencion, ATN.ID_HISTORICO_PADRE AS idHistoricoPadre, ATN.ID_HISTORICO_RECEP AS idHistoricoRecep, ATN.TIENE_RESPUESTA AS tieneRespuesta, DOC.ID_AREA AS idAreaDocumento, DOC.TIPO_AREA AS tipoAreaDocumento, DOC.ID_TIPO_DOCUMENTO AS idTipoDocumento, DOC.ID_ACRONIMO AS idAcronimoDocumento, DOC.NUM_DOCUMENTO AS numDocumento, DOC.NOMBRE_DOCUMENTO AS nombreDocumento, DOC.ESTATUS AS estatusDocumento, DOC.TIPO_CAPTURA AS tipoCaptura, DOC.ASUNTO AS asunto, DOC.FECHA_CREACION AS fechaCreacion, DOC.CONTIENE_ANEXOS AS contieneAnexos, AREA.ID_ENTIDAD AS idEntidadArea, AREA.DESCRIPCION AS descripcionArea, AREA.SIGLAS AS siglasArea FROM H_BANDEJA_E_ATENCION ATN INNER JOIN DOCUMENTOS DOC ON ATN.ID_DOCUMENTO=DOC.ID_DOCUMENTO INNER JOIN  C_AREAS AREA ON AREA.ID_AREA=DOC.ID_AREA AND AREA.TIPO_AREA=DOC.TIPO_AREA <condiciones> <orden> ) WHERE rownum <=:maxRows ) row_ ) WHERE rownum_ > :minRows
query_consultar_num_bandeja_e_hatencion												= SELECT COUNT(*) AS totalAtencion FROM H_BANDEJA_E_ATENCION <condiciones>

#---------------------------------------------------------------------------------
#						QUERY BANDEJA DE HISTORICO INFO
#---------------------------------------------------------------------------------
query_consultar_bandeja_e_hinfo														= SELECT * FROM ( SELECT row_.*, rownum rownum_ FROM (SELECT * FROM (SELECT INFO.ID_DOCUMENTO AS idDocumento, INFO.ID_PERSONA AS idPersona, INFO.anio as anio, INFO.FECHA_RECEPCION as fechaRecepcion, INFO.USUARIO AS usuario, INFO.FECHA_HORA AS fechaHora, INFO.ID_AREA AS idArea, INFO.TIPO_AREA AS tipoArea, INFO.NO_LEIDO AS noLeido, INFO.ID_HISTORICO_PADRE AS idHistoricoPadre, INFO.ID_HISTORICO_RECEP AS idHistoricoRecep, DOC.ID_AREA AS idAreaDocumento, DOC.TIPO_AREA AS tipoAreaDocumento, DOC.ID_TIPO_DOCUMENTO AS idTipoDocumento, DOC.ID_ACRONIMO AS idAcronimoDocumento, DOC.NUM_DOCUMENTO AS numDocumento, DOC.NOMBRE_DOCUMENTO AS nombreDocumento, DOC.ESTATUS AS estatusDocumento, DOC.TIPO_CAPTURA AS tipoCaptura, DOC.ASUNTO AS asunto, DOC.FECHA_CREACION AS fechaCreacion, DOC.CONTIENE_ANEXOS AS contieneAnexos, AREA.ID_ENTIDAD AS idEntidadArea, AREA.DESCRIPCION AS descripcionArea, AREA.SIGLAS AS siglasArea FROM H_BANDEJA_E_INFO INFO INNER JOIN DOCUMENTOS DOC ON INFO.ID_DOCUMENTO=DOC.ID_DOCUMENTO INNER JOIN  C_AREAS AREA ON AREA.ID_AREA=DOC.ID_AREA AND AREA.TIPO_AREA=DOC.TIPO_AREA <condiciones> <orden>) WHERE rownum <=:maxRows ) row_ ) WHERE rownum_ > :minRows
query_consultar_num_bandeja_e_hinfo													= SELECT COUNT(*) AS totalInfo FROM H_BANDEJA_E_INFO <condiciones>

#---------------------------------------------------------------------------------
#						QUERY BANDEJA DE OFICIALÍA
#---------------------------------------------------------------------------------
query_consultar_numero_entrada_porusuario											= SELECT COUNT(*) AS numEntrada FROM BANDEJA_ENTRADAS_OFICIALIA WHERE id_oficialia = :idOficialia
query_consultar_numero_entrada_porArea												= SELECT COUNT(*) AS numEntrada FROM BANDEJA_ENTRADAS_OFICIALIA WHERE id_oficialia = :idOficialia and id_area_destinatario = :idAreaDestinatario
query_bandeja_oficialia_consultarAreas												= select distinct ca.id_area as idArea, ca.tipo_area as tipoArea, ca.id_entidad as idEntidad, ca.descripcion as descripcion, ca.siglas as siglas from oficialias_areas oa join c_areas ca on oa.id_area = ca.id_area where oa.id_oficialia = :idOficialia
query_bandeja_oficialia_consultarTodasLasAreas										= select distinct ca.id_area as idArea, ca.tipo_area as tipoArea, ca.id_entidad as idEntidad, ca.descripcion as descripcion, ca.siglas as siglas from oficialias_areas oa join c_areas ca on oa.id_area = ca.id_area
query_bandeja_oficialia_consultarBandeja											= select beo.id_oficialia as idOficialia, beo.id_documento as idDocumento, beo.anio as anio, beo.id_area_remitente as idAreaRemitente, beo.tipo_area_remitente as tipoAreaRemitente, beo.en_clasificacion as enClasificacion, beo.id_oficialia_clasificando as idOficialiaClasificando, beo.contiene_anexos as contieneAnexos, beo.usuario as usuario, beo.fecha_hora as fechaHora, TO_CHAR(beo.fecha_hora, 'DD/MM/YYYY HH:MI AM') as fechaOficialia, d.num_documento as numDocumento, d.anio as anioDocumento, d.asunto as asunto, (ea.nombre || ' ' || ea. apellidos) as nombreCompleto from bandeja_entradas_oficialia beo join documentos d on beo.id_documento = d.id_documento join documentos_remitentes dr on beo.id_documento = dr.id_documento join estructura_areas ea on dr.id_persona_remitente = ea.id_persona where beo.id_area_destinatario = :idAreaDestinatario and beo.id_oficialia = :idOficialia ORDER BY beo.fecha_hora desc
query_bandeja_oficialia_consultarBandejaNombre										= select beo.id_oficialia as idOficialia, beo.id_documento as idDocumento, beo.anio as anio, beo.id_area_remitente as idAreaRemitente, beo.tipo_area_remitente as tipoAreaRemitente, beo.en_clasificacion as enClasificacion, beo.id_oficialia_clasificando as idOficialiaClasificando, beo.contiene_anexos as contieneAnexos, beo.usuario as usuario, beo.fecha_hora as fechaHora, TO_CHAR(beo.fecha_hora, 'DD/MM/YYYY HH:MI AM') as fechaOficialia, d.num_documento as numDocumento, d.anio as anioDocumento, d.asunto as asunto, (ea.nombre || ' ' || ea. apellidos) as nombreCompleto from bandeja_entradas_oficialia beo join documentos d on beo.id_documento = d.id_documento join documentos_remitentes dr on beo.id_documento = dr.id_documento join estructura_areas ea on dr.id_persona_remitente = ea.id_persona where beo.id_area_destinatario = :idAreaDestinatario and beo.id_oficialia = :idOficialia ORDER BY d.num_documento desc
query_bandeja_oficialia_consultarBandejaLazy										= select beo.id_oficialia as idOficialia, beo.id_documento as idDocumento, beo.anio as anio, beo.id_area_remitente as idAreaRemitente, beo.tipo_area_remitente as tipoAreaRemitente, beo.en_clasificacion as enClasificacion, beo.id_oficialia_clasificando as idOficialiaClasificando, beo.contiene_anexos as contieneAnexos, beo.usuario as usuario, beo.fecha_hora as fechaHora, TO_CHAR(beo.fecha_hora, 'DD/MM/YYYY HH:MI AM') as fechaOficialia, d.num_documento as numDocumento, d.anio as anioDocumento, d.asunto as asunto, (ea.nombre || ' ' || ea. apellidos) as nombreCompleto from bandeja_entradas_oficialia beo join documentos d on beo.id_documento = d.id_documento join documentos_remitentes dr on beo.id_documento = dr.id_documento join estructura_areas ea on dr.id_persona_remitente = ea.id_persona where beo.id_area_destinatario = :idAreaDestinatario and beo.id_oficialia = :idOficialia rownum and between :minRows and :maxRows ORDER BY beo.fecha_hora desc
query_consultar_personas_oficialiasPorArea											= select oa.id_oficialia as idOficialia, ea.id_area as idAreaDestinatario, ea.tipo_area as tipoAreaDestinatario, (select distinct eeaa.ID_AREA from documentos_remitentes ddrr join estructura_areas eeaa on ddrr.id_persona_remitente = eeaa.ID_PERSONA where ddrr.id_documento = :idDocumento) as idAreaRemitente, (select distinct eeaa.TIPO_AREA from documentos_remitentes ddrr join estructura_areas eeaa on ddrr.id_persona_remitente = eeaa.ID_PERSONA where ddrr.id_documento = :idDocumento) as tipoAreaRemitente from documentos_destinatarios dd join estructura_areas ea on dd.ID_PERSONA_DESTINATARIA = ea.ID_PERSONA join oficialias_areas oa on ea.id_area = oa.id_area join oficialias o on oa.id_oficialia = o.ID_OFICIALIA where dd.id_documento = :idDocumento group by oa.id_oficialia, ea.id_area, ea.tipo_area
query_bandeja_oficialia_clasificar													= UPDATE bandeja_entradas_oficialia SET en_clasificacion = :enClasificacion, ID_OFICIALIA_CLASIFICANDO = :idOficialiaClasificando, fecha_clasificacion = :fechaClasificacion WHERE ID_DOCUMENTO = :idDocumento and id_area_destinatario = :idAreaDestinatario
query_bandejaOficialia_cancelarClasificacion										= UPDATE bandeja_entradas_oficialia SET en_clasificacion = null, ID_OFICIALIA_CLASIFICANDO = null, fecha_clasificacion = null WHERE ID_DOCUMENTO = :idDocumento and id_area_destinatario = :idArea and tipo_area_destinatario = :tipoArea
query_bandejaOficialia_eliminar														= DELETE from bandeja_entradas_oficialia where id_documento = :idDocumento and id_area_destinatario = :idAreaDestinatario and tipo_area_destinatario = :tipoAreaDestinatario
query_bandejaOficialia_marcarComoLeido												= UPDATE bandeja_entradas_oficialia SET no_leido = :noLeido where id_documento = :idDocumento and id_area_destinatario = :idArea and tipo_area_destinatario = :tipoArea
query_bandejaOficialia_decrementarNotificacion										= UPDATE notificaciones_of SET documentos_pendientes = documentos_pendientes - 1 WHERE id_area = :idArea and tipo_area = :tipoArea and id_modulo = :idModulo
query_bandejaOficialia_consultarRemitentesCadena									= SELECT LISTAGG(ea.tratamiento || ea.nombre || ' ' || ea.apellidos, ', ') WITHIN GROUP (ORDER BY id_persona_remitente) remitentes FROM documentos_remitentes dr join estructura_areas ea on ea.id_persona = dr.ID_PERSONA_REMITENTE where id_documento = :idDocumento ORDER BY ea.nombre

#---------------------------------------------------------------------------------
#						QUERY CORRESPONSAL
#---------------------------------------------------------------------------------
query_consultar_corresponsales														= SELECT ea.id_persona AS idPersona, ea.nombre AS nombre, ea.apellidos AS apellidos, ea.puesto AS puesto, ea.genero AS genero,  ea.cuenta_ldap AS cuentaLDAP, extension_tel AS extensionTel, ea.tratamiento AS tratamiento, ca.descripcion AS descripcionArea, c.id_corresponsal AS idCorresponsal, c.FECHA_INICIO AS fechaInicio, c.FECHA_FIN AS fechaFin, CASE WHEN c.fecha_fin > sysdate THEN 1 ELSE 0 END AS periodoVencido FROM estructura_areas ea INNER JOIN c_areas ca ON ea.id_area = ca.id_area AND ea.tipo_area = ca.tipo_area INNER JOIN  corresponsales c ON ea.id_persona = c.id_persona_co WHERE c.id_persona_ti = :idPersona AND c.estatus = 'A'
query_corresponsal_insertar															= INSERT INTO CORRESPONSALES values (:idCorresponsal, :idPersona, :usuario, :fechaHora)
query_consultar_corresponsales_candidatos											= SELECT eaa.idPersona as idPersona, eaa.idArea as idArea, eaa.tipoArea as tipoArea, eaa.nombre as nombre, eaa.apellidos as apellidos, eaa.puesto as puesto, eaa.tratamiento as tratamiento, ca.descripcion as descripcionArea FROM ((SELECT ea.id_persona as idPersona, ea.id_area as idArea, ea.tipo_area as tipoArea, ea.nombre as nombre, ea.apellidos as apellidos, ea.puesto as puesto, ea.tratamiento as tratamiento FROM ESTRUCTURA_AREAS ea WHERE <condicionNombre> <condicionApellidos> ea.id_persona != :idPersona AND ea.id_persona IN (SELECT id_persona FROM JERARQUIA_PERSONAS WHERE id_area = :idArea AND tipo_area = :tipoArea AND id_nivel > (SELECT MIN(id_nivel) FROM JERARQUIA_PERSONAS WHERE id_persona = :idPersona))) MINUS (SELECT eam.id_persona as idPersona, eam.id_area as idArea, eam.tipo_area as tipoArea, eam.nombre as nombre, eam.apellidos as apellidos, eam.puesto as puesto, eam.tratamiento as tratamiento FROM ESTRUCTURA_AREAS eam, CORRESPONSALES cm WHERE eam.id_persona = cm.id_persona_co AND cm.estatus = 'A')) eaa INNER JOIN c_areas ca ON eaa.idArea = ca.id_area AND eaa.tipoArea = ca.tipo_area
query_eliminar_corresponsal															= UPDATE CORRESPONSALES SET estatus = 'I' WHERE id_corresponsal = :idCorresponsal

#---------------------------------------------------------------------------------
#						QUERY PLANTILLAS
#---------------------------------------------------------------------------------
query_consultar_tipo_documentos														= SELECT id_tipo_documento AS idTipoDocumento, descripcion FROM C_TIPO_DOCUMENTOS ORDER BY descripcion
query_consultar_acronimos															= SELECT a.id_area AS idArea, a.tipo_area AS tipoArea, a.id_tipo_documento AS idTipoDocumento, a.id_acronimo AS idAcronimo, a.descripcion AS descripcion, NVL(p.numero, 0) AS numeroRepeticiones FROM ACRONIMOS a LEFT OUTER JOIN (SELECT id_acronimo, id_area, tipo_area, id_tipo_documento, COUNT(*) AS numero FROM PLANTILLAS where id_persona = :idPersona GROUP BY id_acronimo, id_area, tipo_area, id_tipo_documento, id_persona) p ON a.id_acronimo = p.id_acronimo AND a.id_area = p.id_area AND a.tipo_area = p.tipo_area AND a.id_tipo_documento = p.id_tipo_documento WHERE a.id_area = :idArea AND a.tipo_area = :tipoArea AND a.id_tipo_documento = :idTipoDocumento  ORDER BY a.descripcion
query_plantillas_insertarPlantilla													= INSERT INTO PLANTILLAS (id_area, tipo_area, id_tipo_documento, id_acronimo, id_persona, nombre_plantilla, usuario, fecha_hora, id_plantilla) VALUES (:idArea, :tipoArea, :idTipoDocumento, :idAcronimo, :idPersona, :nombrePlantilla, :usuario, sysdate, (SELECT COALESCE(Max(id_plantilla), 0)+1 FROM PLANTILLAS WHERE id_area = :idArea AND tipo_area = :tipoArea AND id_tipo_documento = :idTipoDocumento AND id_acronimo = :idAcronimo) )

#---------------------------------------------------------------------------------
#						QUERY Apartado de folios
#---------------------------------------------------------------------------------
query_apartadoFolios_obtenerTiposDocumentos											= SELECT ctd.descripcion, ctd.id_tipo_documento AS idTipoDocumento FROM C_TIPO_DOCUMENTOS ctd INNER JOIN ACRONIMOS acr ON ctd.id_tipo_documento = acr.id_tipo_documento WHERE acr.id_area = :idArea AND acr.tipo_area = :tipoArea GROUP BY ctd.descripcion, ctd.id_tipo_documento ORDER BY ctd.descripcion
query_apartadoFolios_obtenerAreas													= SELECT ca.id_area AS idArea, ca.tipo_area AS tipoArea, ca.descripcion FROM C_AREAS ca INNER JOIN ACRONIMOS acr ON ca.tipo_area = acr.tipo_area AND ca.id_area = acr.id_area WHERE ca.tipo_area = :tipoArea AND ca.id_entidad = :idEntidad GROUP BY ca.id_area, ca.tipo_area, ca.descripcion ORDER BY ca.descripcion
query_apartadoFolios_insertarApartado												= INSERT INTO APARTADO_NUM_DOC (id_area, tipo_area, id_tipo_documento, id_acronimo, anio, tipo_apartado, id_persona_capturo, fecha_captura, usuario, fecha_hora, id_numero_documento) VALUES (:idArea, :tipoArea, :idTipoDocumento, :idAcronimo, :anio, :tipoApartado, :idPersonaCapturo, sysdate, :usuario, sysdate, (SELECT COALESCE(Max(id_numero_documento), 0)+1 FROM APARTADO_NUM_DOC WHERE id_area = :idArea AND tipo_area = :tipoArea AND id_tipo_documento = :idTipoDocumento AND id_acronimo = :idAcronimo))

#---------------------------------------------------------------------------------
#						QUERY Oficialia de partes (electrónico)
#---------------------------------------------------------------------------------		
query_oficialiaPartes_obtenerTipoDocumento											= select ctd.descripcion, ctd.id_tipo_documento as idTipoDocumento from documentos d inner join c_tipo_documentos ctd on d.id_tipo_documento = ctd.id_tipo_documento where id_documento = :idDocumento
query_oficialiaPartes_liberarFolio													= UPDATE apartados_num_doc_of SET estatus = :estatus WHERE id_area = :idArea and tipo_area = :tipoArea and folio_oficialia = :folioOficialia
query_oficialiaPartes_consultarFolioDisponible										= Select id_area as idArea, tipo_area as tipoArea, id_folio_of as idFolioOf, folio_oficialia as folioOficialia, id_oficialia_aparto as idOficialiaAparto, estatus, anio, tipo_apartado as tipoApartado, usuario, fecha_hora as fechaHora from apartados_num_doc_of where id_area = :idArea and tipo_area = :tipoArea and estatus = :estatus ORDER BY ID_FOLIO_OF FETCH first row only
query_turnado_obtener_personas_turnar												= SELECT DISTINCT persona.id_persona AS idPersona, persona.id_area AS idArea, persona.tipo_area AS tipoArea, persona.nombre AS nombre, persona.apellidos AS apellidos, persona.nombre || ' '||persona.apellidos as nombreCompleto, persona.puesto AS puesto, persona.tratamiento AS tratamiento, persona.extension_tel AS extensionTel, persona.genero AS genero, persona.cuenta_ldap AS cuentaLDAP, persona.nombre_nivel_area AS nombreNivelArea, persona.estatus AS estatus FROM jerarquia_personas jerarquia INNER JOIN estructura_areas persona ON jerarquia.id_persona = persona.id_persona WHERE jerarquia.id_persona IN (SELECT perNiv.id_persona FROM jerarquia_personas perNiv WHERE (perNiv.id_nivel IN (SELECT min(nivMen.id_nivel) FROM jerarquia_personas nivMen WHERE nivMen.id_persona = :personaActual) and perNiv.id_area = :idArea and perNiv.tipo_area = :tipoArea and perNiv.id_persona <> :personaActual) or jerarquia.id_persona IN (SELECT       niv.id_persona FROM jerarquia_personas niv WHERE niv.id_persona_padre = :personaActual and niv.id_area = :idArea and niv.tipo_area = :tipoArea) or jerarquia.id_persona IN (SELECT turEsp.id_persona_turnado FROM personas_turnado_especial turEsp WHERE turEsp.id_persona = :personaActual)) and jerarquia.id_persona not IN (SELECT turDes.id_persona_deshab FROM personas_deshab_turnado turDes WHERE turDes.id_persona = :personaActual)

#---------------------------------------------------------------------------------
#						QUERY Reportes de Oficialía
#---------------------------------------------------------------------------------
query_reporte_oficialia																= select DISTINCT APARTADOS_NUM_DOC_OF.FOLIO_OFICIALIA AS folioOficialia, DOCUMENTOS.NUM_DOCUMENTO AS numDocumento, DOCUMENTOS.ASUNTO AS asunto, LISTAGG(ESTRUC_AREA_C.NOMBRE || ' ' || ESTRUC_AREA_C.APELLIDOS, ',') WITHIN GROUP (ORDER BY DOCUMENTOS.NUM_DOCUMENTO) OVER(PARTITION BY DOCUMENTOS.NUM_DOCUMENTO) AS personaCC, DOCUMENTOS.FECHA_CREACION AS fechaCreacion, C_TIPO_DOCUMENTOS.DESCRIPCION AS tipoDocumento, C_SECCIONES.DESCRIPCION AS descSeccion, C_CATEGORIAS.DESCRIPCION AS descCategoria, C_AREAS.DESCRIPCION AS descArea, C_TIPO_AREAS.DESCRIPCION AS tipoArea, LISTAGG(ESTRUC_AREA_A.NOMBRE || ' ' || ESTRUC_AREA_A.APELLIDOS, ',') WITHIN GROUP (ORDER BY DOCUMENTOS.NUM_DOCUMENTO) OVER(PARTITION BY DOCUMENTOS.NUM_DOCUMENTO) AS personaRemitente, LISTAGG(REMITENTES_EXTERNOS_OF.NOMBRE_REMITENTE, ',') WITHIN GROUP (ORDER BY DOCUMENTOS.NUM_DOCUMENTO) OVER(PARTITION BY DOCUMENTOS.NUM_DOCUMENTO) AS personaRemitenteExt, LISTAGG(ESTRUC_AREA_B.NOMBRE || ' ' || ESTRUC_AREA_B.APELLIDOS, ',') WITHIN GROUP (ORDER BY DOCUMENTOS.NUM_DOCUMENTO) OVER(PARTITION BY DOCUMENTOS.NUM_DOCUMENTO) AS personaDestinataria from DOCUMENTOS left join DOCUMENTO_FOLIOS ON DOCUMENTOS.ID_DOCUMENTO = DOCUMENTO_FOLIOS.ID_DOCUMENTO left join APARTADOS_NUM_DOC_OF ON DOCUMENTO_FOLIOS.ID_FOLIO_OFICIALIA = APARTADOS_NUM_DOC_OF.ID_FOLIO_OF left join DOCUMENTOS_CCP ON DOCUMENTOS.ID_DOCUMENTO = DOCUMENTOS_CCP.ID_DOCUMENTO left join ESTRUCTURA_AREAS ESTRUC_AREA_C ON DOCUMENTOS_CCP.ID_PERSONA = ESTRUC_AREA_C.ID_PERSONA AND ESTRUC_AREA_C.ID_PERSONA = DOCUMENTOS_CCP.ID_PERSONA left join C_TIPO_DOCUMENTOS ON DOCUMENTOS.ID_TIPO_DOCUMENTO = C_TIPO_DOCUMENTOS.ID_TIPO_DOCUMENTO left join DOCUMENTOS_CLASIF_AREA ON DOCUMENTOS.ID_DOCUMENTO = DOCUMENTOS_CLASIF_AREA.ID_DOCUMENTO left join C_SECCIONES ON DOCUMENTOS_CLASIF_AREA.ID_SECCION = C_SECCIONES.ID_SECCION left join C_CATEGORIAS ON (DOCUMENTOS_CLASIF_AREA.ID_CATEGORIA = C_CATEGORIAS.ID_CATEGORIA AND DOCUMENTOS_CLASIF_AREA.ID_SECCION = C_CATEGORIAS.ID_SECCION) left join C_AREAS ON DOCUMENTOS.ID_AREA = C_AREAS.ID_AREA left join C_TIPO_AREAS ON DOCUMENTOS.TIPO_AREA = C_TIPO_AREAS.ID_TIPO_AREA left join DOCUMENTOS_REMITENTES ON DOCUMENTOS.ID_DOCUMENTO = DOCUMENTOS_REMITENTES.ID_DOCUMENTO left join ESTRUCTURA_AREAS ESTRUC_AREA_A ON DOCUMENTOS_REMITENTES.ID_PERSONA_REMITENTE = ESTRUC_AREA_A.ID_PERSONA AND ESTRUC_AREA_A.ID_PERSONA = DOCUMENTOS_REMITENTES.ID_PERSONA_REMITENTE left join DOCUMENTOS_DESTINATARIOS ON DOCUMENTOS.ID_DOCUMENTO = DOCUMENTOS_DESTINATARIOS.ID_DOCUMENTO left join ESTRUCTURA_AREAS ESTRUC_AREA_B ON DOCUMENTOS_DESTINATARIOS.ID_PERSONA_DESTINATARIA = ESTRUC_AREA_B.ID_PERSONA AND ESTRUC_AREA_B.ID_PERSONA = DOCUMENTOS_DESTINATARIOS.ID_PERSONA_DESTINATARIA left join DOCUMENTOS_REMITENTES_EXT ON DOCUMENTOS.ID_DOCUMENTO = DOCUMENTOS_REMITENTES_EXT.ID_DOCUMENTO left join REMITENTES_EXTERNOS_OF ON DOCUMENTOS_REMITENTES_EXT.ID_REMITENTE = REMITENTES_EXTERNOS_OF.ID_REMITENTE

#---------------------------------------------------------------------------------
#						QUERY Remitentes Externos
#---------------------------------------------------------------------------------
query_remitentes_externos 															= select distinct ID_REMITENTE AS idRemitente from DOCUMENTOS_REMITENTES_EXT where ID_AREA = :idArea